{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/shaderstudy/2.png","path":"images/shaderstudy/2.png","modified":1,"renderable":0},{"_id":"source/images/shaderstudy/3.png","path":"images/shaderstudy/3.png","modified":1,"renderable":0},{"_id":"source/images/ccd1.png","path":"images/ccd1.png","modified":1,"renderable":0},{"_id":"source/images/ccd2.png","path":"images/ccd2.png","modified":1,"renderable":0},{"_id":"source/images/rig.png","path":"images/rig.png","modified":1,"renderable":0},{"_id":"source/images/toycer/5.png","path":"images/toycer/5.png","modified":1,"renderable":0},{"_id":"source/images/ccd3.png","path":"images/ccd3.png","modified":1,"renderable":0},{"_id":"source/images/handle.png","path":"images/handle.png","modified":1,"renderable":0},{"_id":"source/images/shaderstudy/4.jpg","path":"images/shaderstudy/4.jpg","modified":1,"renderable":0},{"_id":"source/images/shaderstudy/5.jpg","path":"images/shaderstudy/5.jpg","modified":1,"renderable":0},{"_id":"source/images/octane/04-16-17.jpg","path":"images/octane/04-16-17.jpg","modified":1,"renderable":0},{"_id":"source/images/octane/04-21-17.jpg","path":"images/octane/04-21-17.jpg","modified":1,"renderable":0},{"_id":"source/images/toycer/4.png","path":"images/toycer/4.png","modified":1,"renderable":0},{"_id":"source/images/ccd4.png","path":"images/ccd4.png","modified":1,"renderable":0},{"_id":"source/images/finger_original.png","path":"images/finger_original.png","modified":1,"renderable":0},{"_id":"source/images/shaderstudy/4.png","path":"images/shaderstudy/4.png","modified":1,"renderable":0},{"_id":"source/images/shaderstudy/5.png","path":"images/shaderstudy/5.png","modified":1,"renderable":0},{"_id":"source/images/octane/04-23-17.jpg","path":"images/octane/04-23-17.jpg","modified":1,"renderable":0},{"_id":"source/images/shaderstudy/1.png","path":"images/shaderstudy/1.png","modified":1,"renderable":0},{"_id":"source/images/Effendi.jpg","path":"images/Effendi.jpg","modified":1,"renderable":0},{"_id":"source/images/toycer/1.png","path":"images/toycer/1.png","modified":1,"renderable":0},{"_id":"source/images/toycer/2.png","path":"images/toycer/2.png","modified":1,"renderable":0},{"_id":"source/images/render3.png","path":"images/render3.png","modified":1,"renderable":0},{"_id":"source/images/octane/04-20-17.jpg","path":"images/octane/04-20-17.jpg","modified":1,"renderable":0},{"_id":"source/images/toycer/3.png","path":"images/toycer/3.png","modified":1,"renderable":0},{"_id":"source/images/toycer/Screen Shot 2020-07-11 at 11.10.24 PM.png","path":"images/toycer/Screen Shot 2020-07-11 at 11.10.24 PM.png","modified":1,"renderable":0},{"_id":"source/images/render4.png","path":"images/render4.png","modified":1,"renderable":0},{"_id":"source/images/finger_laser.gif","path":"images/finger_laser.gif","modified":1,"renderable":0},{"_id":"source/images/toycer/21.gif","path":"images/toycer/21.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"85e21c59d162610534cbd437a4208f5317e9ec99","modified":1611177837391},{"_id":"source/_posts/.DS_Store","hash":"b147d311b3d65da39e2cc7673e7848c004a56635","modified":1611177837392},{"_id":"source/_posts/.Python-cheat-sheet.md.swp","hash":"2d0199371516b4a6a711d804472bcc84d882e0df","modified":1611177837393},{"_id":"source/_posts/6-132-1.md","hash":"41279327c3baccbf235630f281a7623eaa083ac9","modified":1611177837393},{"_id":"source/_posts/C-note-1.md","hash":"b771fc46a11f809dd7bb523c7d91573642158900","modified":1611177837394},{"_id":"source/_posts/C-note-2.md","hash":"31693c88ee705325f07bfada50fabc0fb606f810","modified":1611177837394},{"_id":"source/_posts/C-note-4-Shared-Pointer.md","hash":"bcad90b3eae01739f987d13ba82466918a84fd2a","modified":1611177837394},{"_id":"source/_posts/C-note-3-Singleton.md","hash":"59068efa056a62d33f2fabecd4598c0229a11c41","modified":1611177837394},{"_id":"source/_posts/Class-definition-in-Python.md","hash":"07209b1fad9d38b4c44f54b449f6fb3d54aeee65","modified":1611177837395},{"_id":"source/_posts/Compare-None-in-Python.md","hash":"05c40c772a413f590959d16c4f1371325b66645c","modified":1611177837395},{"_id":"source/_posts/Get-to-know-MoCap.md","hash":"38c76e6bfe8b989d3b2ce64d3a51974266874121","modified":1611177837396},{"_id":"source/_posts/Hello-Technical-Animation.md","hash":"9731b29c0d474be0a232c4e4a1a4d151ed2ab5a5","modified":1611177837396},{"_id":"source/_posts/Honorific-Verbs.md","hash":"77bb04ef54b527331b804ed79469aa8b4274926c","modified":1611179251923},{"_id":"source/_posts/Mini-Project-1.md","hash":"b58c9aea6df643114957b0785a1fd0bc5e5ccbf0","modified":1611177837396},{"_id":"source/_posts/Mini-Project-2.md","hash":"9a00873758e4eba58749b9adbd17c68911c20735","modified":1611177837396},{"_id":"source/_posts/Mini-ray-tracer-more-and-some-thoughts.md","hash":"00d13082811be471b0bf53c6f385e1e16d36db58","modified":1611177837396},{"_id":"source/_posts/Mini-ray-tracer-progress.md","hash":"ba5525f5016b92bd7c0cbe320269a8bd18f3528d","modified":1611177837396},{"_id":"source/_posts/Put-on-the-headset.md","hash":"e23367b8062cb199440bbfe01beb52c8aa868ef8","modified":1611177837397},{"_id":"source/_posts/Python-cheat-sheet.md","hash":"80a089268531e663d5c40e9125e6eba5ca1600c7","modified":1611177837397},{"_id":"source/_posts/Replace-a-list-in-Python.md","hash":"c91827d4e5c6215c330be4e68807b15370b1a9d4","modified":1611177837397},{"_id":"source/_posts/Reverse-Linked-List-in-Python.md","hash":"c30e9213bb4ade0bc8011a160f9619f81fb9f5bd","modified":1611177837397},{"_id":"source/_posts/SDF-basics-1.md","hash":"a50ef112c7e97a2f885cc9a03cb0151be8c1dd08","modified":1611177837397},{"_id":"source/_posts/Shader-study-1.md","hash":"2d4bf38e055d10fa684bd9a9b5c466af348aba19","modified":1611177837398},{"_id":"source/_posts/SDF-basics-2.md","hash":"d2777204a3c1912b207a69808b39a50a6302bc22","modified":1611177837398},{"_id":"source/_posts/Setup-glfw-and-glew.md","hash":"e2b130ea08a8eb005ea085e7a1548d6528a1304c","modified":1611177837398},{"_id":"source/_posts/Speaking-of-rendering.md","hash":"e11bb7e923111daa5a1c79b8107311d3a645e381","modified":1611177837398},{"_id":"source/_posts/Starting-a-mini-ray-tracer-with-ShaderToy.md","hash":"888cbd8446ecaffa054612447da782f76096b3e1","modified":1611177837398},{"_id":"source/_posts/Thinking-about-IK.md","hash":"1b83c36f42f868d989c4e7a6885910d61185d0da","modified":1611177837398},{"_id":"source/_posts/Zip-in-Python.md","hash":"6d996cfbd9af251e05d41a61a291eb91c940abb9","modified":1611177837398},{"_id":"source/_posts/const-T-and-xx.md","hash":"4102416cf3a1cb50e5f23f221967590ad008a23c","modified":1611177837399},{"_id":"source/about/index.md","hash":"87d4d0332f0af5b130a75733d14a94f5667bf147","modified":1611177837399},{"_id":"source/tags/index.md","hash":"c87cdf4f3c95cae9a428e5245641ce969e60ea01","modified":1611177837526},{"_id":"source/images/.DS_Store","hash":"06f8d68fb3facaa358f64294169e3e5fbe58aa3a","modified":1611177837399},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1611179858269},{"_id":"themes/cactus/.git/config","hash":"c9a0b9fc0b92d2337dc125357f2bb7c648badb22","modified":1611179858273},{"_id":"themes/cactus/.git/index","hash":"d8e43876ddb529871694a74d42b9f41ff0372d8a","modified":1611179874822},{"_id":"themes/cactus/.git/packed-refs","hash":"c59ba8ab55a662e76a9d31e3ffaaebe04c16cbdb","modified":1611179858267},{"_id":"themes/cactus/.git/FETCH_HEAD","hash":"0b6721dd69d8716fbf7a6074802fc64c8f1d1d40","modified":1611180810415},{"_id":"themes/cactus/.git/ORIG_HEAD","hash":"28f05949a749b8572a7ef8b962bdabe798f69317","modified":1611180807350},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1611179851818},{"_id":"source/images/octane/.DS_Store","hash":"285c990c2373aa0bb9f23d9ef87d244eb7c431fa","modified":1611177837443},{"_id":"source/images/shaderstudy/2.png","hash":"74872718a85d2f3c915ccf758422370179c3223e","modified":1611177837466},{"_id":"source/images/shaderstudy/3.png","hash":"53f70b4c97300ff3dc5a4d11405b6ea4381c0127","modified":1611177837466},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1611179851819},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1611179851820},{"_id":"themes/cactus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1611179851819},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1611179851819},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1611179851821},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1611179851819},{"_id":"themes/cactus/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1611179851820},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1611179851821},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1611179851820},{"_id":"themes/cactus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1611179851818},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1611179851820},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1611179851819},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1611179851821},{"_id":"themes/cactus/.git/logs/HEAD","hash":"40f9dc172fa9a91186c2581774089099bb8395d2","modified":1611179858271},{"_id":"source/images/ccd1.png","hash":"717954e6937aa92d501ef9952f47050296b2d215","modified":1611177837407},{"_id":"source/images/ccd2.png","hash":"1237f1e4f11429c8b5f38f5baad7a1ee1fe8cd17","modified":1611177837408},{"_id":"source/images/rig.png","hash":"2cbe0497a90b7f9a98e9c9f57fb7d02226292ec1","modified":1611177837463},{"_id":"source/images/toycer/5.png","hash":"3593640879ad1cd8543aa5d8def641eab57ce8bd","modified":1611177837519},{"_id":"source/images/ccd3.png","hash":"67d7ade86a38e7b11a3c8cd40922f3864a1300f9","modified":1611177837409},{"_id":"source/images/handle.png","hash":"322a248a884be12417726717da93723d5c57b3aa","modified":1611177837443},{"_id":"themes/cactus/.git/refs/heads/master","hash":"28f05949a749b8572a7ef8b962bdabe798f69317","modified":1611179858271},{"_id":"source/images/shaderstudy/4.jpg","hash":"e7ad0e9a6272203805731c1f783b2ebd1cfb46ee","modified":1611177837467},{"_id":"source/images/shaderstudy/5.jpg","hash":"f134d0e3eb3645b497de89191c91fc0aa926c8d5","modified":1611177837471},{"_id":"themes/cactus/.git/objects/pack/pack-7f3a840681868270a870dc13b653549e3a4fe90b.idx","hash":"27abbab12e9024bd3d93c5a43525ed5bf022ee0e","modified":1611179858258},{"_id":"source/images/octane/04-16-17.jpg","hash":"6916cf38ee6698c6df79ff43cdfac18c586ac865","modified":1611177837444},{"_id":"source/images/octane/04-21-17.jpg","hash":"cf48304cdc46ae3f0cecee8372e421b2655b3207","modified":1611177837446},{"_id":"source/images/toycer/4.png","hash":"3edb61ff6d76d8bc4292d4a5a7345fdfd4cc9689","modified":1611177837519},{"_id":"themes/cactus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1611179858269},{"_id":"source/images/ccd4.png","hash":"62c185b9917720cd36ee276c483de311d5b16c03","modified":1611177837410},{"_id":"themes/cactus/.git/logs/refs/heads/master","hash":"40f9dc172fa9a91186c2581774089099bb8395d2","modified":1611179858271},{"_id":"source/images/finger_original.png","hash":"014c1be7b64b7f2507486f6159a3211bff969ddf","modified":1611177837441},{"_id":"source/images/shaderstudy/4.png","hash":"2e0c7e6c395edc50520ec80a86558f43d8e99ee1","modified":1611177837469},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/HEAD","hash":"40f9dc172fa9a91186c2581774089099bb8395d2","modified":1611179858269},{"_id":"source/images/shaderstudy/5.png","hash":"ed3b5d28e32db8cfd06d0a0bdc73b2bfecf8be93","modified":1611177837473},{"_id":"source/images/octane/04-23-17.jpg","hash":"54ff6d200ff7a848993deba6c94784dfe54f7ba7","modified":1611177837448},{"_id":"source/images/shaderstudy/1.png","hash":"1050ab5d87ceaea6cf623f3198b28d0cc3717c9d","modified":1611177837466},{"_id":"source/images/Effendi.jpg","hash":"e49dfc36cc504042d30fd31fc67876cd8a2c6581","modified":1611177837405},{"_id":"source/images/toycer/1.png","hash":"6e2dc52689475bd28f588eab2fb34e8f480f0f3f","modified":1611177837476},{"_id":"source/images/toycer/2.png","hash":"7a07590f527cd705e23b65fb6e664dad3a4895cf","modified":1611177837480},{"_id":"source/images/render3.png","hash":"1d12e2c394252f720ed28437e7798b6f20003722","modified":1611177837450},{"_id":"source/images/octane/04-20-17.jpg","hash":"1caa1a54b96da82f5d260231fd7df93c1df9c49d","modified":1611177837446},{"_id":"source/images/toycer/3.png","hash":"89eb9fbd8ee87ab3cea3bce1f2fba9cd73544ccf","modified":1611177837517},{"_id":"source/images/toycer/Screen Shot 2020-07-11 at 11.10.24 PM.png","hash":"7e5086a427bb985bd76fe1b11549603a6ed42670","modified":1611177837526},{"_id":"source/images/render4.png","hash":"13d1085ed956d375ab94ca7ee95289cb2c4f5f2b","modified":1611177837461},{"_id":"source/images/finger_laser.gif","hash":"e4752433dc88f7bf3c5b73c4ce019b38e4ac4793","modified":1611177837439},{"_id":"source/images/toycer/21.gif","hash":"d3ddab4113c9fad3f7527b9904cdde4853e29a81","modified":1611177837511},{"_id":"themes/cactus/.git/objects/pack/pack-7f3a840681868270a870dc13b653549e3a4fe90b.pack","hash":"b824d2a09b03dcce3f6f00afbf87aa1218c4a436","modified":1611179858257}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-06-30T06:09:22.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-06-29 23:09:22\n---\n","updated":"2021-01-20T21:23:57.399Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckk5zgt6v00011zjxk3ed1hhr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-01-27T01:18:37.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-26 17:18:37\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-01-20T21:23:57.526Z","path":"tags/index.html","layout":"page","_id":"ckk5zgt6x00031zjxfgmv5qqg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"6 / (-132) = -1 ?","date":"2017-03-30T21:12:38.000Z","_content":"In Leetcode problem [150. Evaluate Reverse Polish Notation](https://leetcode.com/problems/evaluate-reverse-polish-notation/#/description), a test case \n```\n[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"\",\"/\",\"\",\"17\",\"+\",\"5\",\"+\"]\n```\ngave a wrong answer. \nAfter looking into it, it turned out that Python caculates 6 / (-132) as -1, which seems weird to me.\nThe reason why that happened is that Python's default division of intergers returns the floor(towards negitive infinity). \nA simple way to avoid this is to use \n```python\nresult = int(float(a) / b).\n```\n\n","source":"_posts/6-132-1.md","raw":"---\ntitle: 6 / (-132) = -1 ?\ndate: 2017-03-30 14:12:38\ntags: [python]\n---\nIn Leetcode problem [150. Evaluate Reverse Polish Notation](https://leetcode.com/problems/evaluate-reverse-polish-notation/#/description), a test case \n```\n[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"\",\"/\",\"\",\"17\",\"+\",\"5\",\"+\"]\n```\ngave a wrong answer. \nAfter looking into it, it turned out that Python caculates 6 / (-132) as -1, which seems weird to me.\nThe reason why that happened is that Python's default division of intergers returns the floor(towards negitive infinity). \nA simple way to avoid this is to use \n```python\nresult = int(float(a) / b).\n```\n\n","slug":"6-132-1","published":1,"updated":"2021-01-20T21:23:57.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt6s00001zjxzjef8w29","content":"<p>In Leetcode problem <a href=\"https://leetcode.com/problems/evaluate-reverse-polish-notation/#/description\" target=\"_blank\" rel=\"noopener\">150. Evaluate Reverse Polish Notation</a>, a test case<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;&quot;,&quot;/&quot;,&quot;&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>gave a wrong answer.<br>After looking into it, it turned out that Python caculates 6 / (-132) as -1, which seems weird to me.<br>The reason why that happened is that Python’s default division of intergers returns the floor(towards negitive infinity).<br>A simple way to avoid this is to use<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = int(float(a) / b).</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>In Leetcode problem <a href=\"https://leetcode.com/problems/evaluate-reverse-polish-notation/#/description\" target=\"_blank\" rel=\"noopener\">150. Evaluate Reverse Polish Notation</a>, a test case<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;&quot;,&quot;/&quot;,&quot;&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>gave a wrong answer.<br>After looking into it, it turned out that Python caculates 6 / (-132) as -1, which seems weird to me.<br>The reason why that happened is that Python’s default division of intergers returns the floor(towards negitive infinity).<br>A simple way to avoid this is to use<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = int(float(a) / b).</span><br></pre></td></tr></table></figure></p>\n"},{"title":"C++ note 2","date":"2020-09-10T23:59:59.000Z","_content":"### 'this' Pointer:\n\n1. Passed as a hidden argument to all non-static member function calls and is available as a local variable within the body of all non-static functions.\n2. `this` is a const pointer.\n3. Objects can destroy themselves by calling the following code `delete this;`. \n\n### Concept:\n1. **C++ polymorphism** means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.\n\n### Function overloading:\n1. In C++, following function declarations [cannot be overloaded](https://www.geeksforgeeks.org/function-overloading-in-c/).\n    - Function declarations that differ only in the return type.\n    - Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration.\n    - Parameter declarations that differ only in a pointer * versus an array [] are equivalent.\n    - Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are equivalent.\n    - Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent.\n    - Two parameter declarations that differ only in their default arguments are equivalent. \n2. C++ allows member methods to be overloaded on the basis of const type. Overloading on the basis of const type can be useful when a function return reference or pointer.\n\n### Static:\n1. Static methods can only access static members (data and methods)\n\n\n### Inheritence:\n1. Assume that an integer takes 4 bytes: `sizeof(derived)` is 80. Since b1 and b2 both inherit from class base, two copies of class base are there in class derived.\n    ```\n    class base {\n        int arr[10];\n    };\n    class b1: public base { };\n    class b2: public base { };\n    class derived: public b1, public b2 {};\n    ```\n2. Assume that an integer takes 4 bytes: `sizeof(derived)` is 48. 8 extra bytes are for bookkeeping information stored by the compiler.\n    ```\n    class base {\n      int arr[10];     \n    };\n    class b1: virtual public base { };\n    class b2: virtual public base { };\n    class derived: public b1, public b2 {};\n     ```\n3. If there is multilevel inheritance, then function is linearly searched up in the inheritance hierarchy until a matching function is found.\n4. A base class pointer can point to a derived class object, but we can only access base class member or virtual functions using the base class pointer.\n5. If a derived class writes its own method, then all functions of base class with same name become hidden, even if signaures of base class functions are different. We can access base class functions using scope resolution operator even if they are made hidden by a derived class function. `Derived d; d.Base::fun(5);`\n6. When we assign an object of derived class to an object of base type, the derived class object is **sliced** off and all the data members inherited from base class are copied.\n7. The base class members cannot be directly assigned using initializer list. We should call the base class constructor in order to initialize base class members.\n8. This is a typical example of diamond problem of multiple inheritance. Here the base class member 'a' is inherited through both Derived1 and Derived2. So there are two copies of 'a' in DerivedDerived which makes the statement \"cout << a;\" ambiguous.\n    ```\n    class Base\n    {\n    protected:\n        int a;\n    public:\n        Base() {a = 0;}\n    };\n    class Derived1:  public Base\n    {\n    public:\n        int c;\n    };\n    class Derived2:  public Base\n    {\n    public:\n        int c;\n    };\n    class DerivedDerived: public Derived1, public Derived2\n    {\n    public:\n        void show()  {   cout << a;  }\n    };\n    int main(void)\n    {\n        DerivedDerived d;\n        d.show();\n        return 0;\n    }\n    ```\n    \n### Virtual:\n1. If a class has a pure virtual function, it becomes an abstract class and an instance of it cannot be created.\n2. If we don't override the pure virtual function in derived class, then derived class also becomes abstract class.\n3. There is nothing like Virtual Constructor. Making constructors virtual doesn't make sense as constructor is responsible for creating an object and it can’t be delegated to any other object by virtual keyword means.\n4. A destructor can be virtual. We may want to call appropriate destructor when a base class pointer points to a derived class object and we delete the object. If destructor is not virtual, then only the base class destructor may be called. If the destructor is vitrual, the derived class destructor is called which in turn calls base class destructor.\n    ```\n    Base *Var = new Derived();\n    delete Var;\n    // but below will call both\n    {\n        Derived Var;\n    }\n    ```\n5.  Compiler places a VPTR with every object.\n6.  When a class has a virtual function, functions with same signature in all descendant classes automatically become virtual. \n\n### Const:\n1. A const object can only call const functions.\n2. `const char* a = \"Anthony\";`\n    is:\n    ```\n    const char string_literal[] = \"Anthony\";\n    const char *a = string_literal;\n    ```\n\n### New & Delete:\n1. It is undefined behavior to call delete twice on a pointer. Anything can happen, the program may crash or produce nothing.\n\n### Exception handling:\n1. try, catch, and throw:\n    **throw** − A program throws an exception when a problem shows up. This is done using a throw keyword.\n    **catch** − A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.\n    **try** − A try block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks.\n2. If both base and derived classes are caught as exceptions then catch block of derived class must appear before the base class. If we put base class first then the derived class catch block will never be reached. \n3. Note that the implicit type conversion doesn't happen when exceptions are caught. eg. The character is not automatically converted to int.\n4. It is compiler error to put catch all block before any other catch. The catch(...) must be the last catch block.\n5. The statement `throw;` is used to re-throw an exception:\n    ```\n    try {\n        try\n        {\n            throw 20;\n        }\n        catch (int n)\n        {\n            cout << \"Inner Catchn\";\n            throw;\n        }\n    }\n    catch (int x)\n    {\n        cout << \"Outer Catchn\";\n    }\n    ```\n6. When an object is created inside a try block, destructor for the object is called before control is transferred to catch block.\n7. When an exception is thrown and not caught, the program terminates abnormally.\n\n### Friend:\n1. Friendship is not inherited.\n\n","source":"_posts/C-note-2.md","raw":"---\ntitle: C++ note 2\ndate: 2020-09-10 16:59:59\ntags: [cpp]\n---\n### 'this' Pointer:\n\n1. Passed as a hidden argument to all non-static member function calls and is available as a local variable within the body of all non-static functions.\n2. `this` is a const pointer.\n3. Objects can destroy themselves by calling the following code `delete this;`. \n\n### Concept:\n1. **C++ polymorphism** means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.\n\n### Function overloading:\n1. In C++, following function declarations [cannot be overloaded](https://www.geeksforgeeks.org/function-overloading-in-c/).\n    - Function declarations that differ only in the return type.\n    - Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration.\n    - Parameter declarations that differ only in a pointer * versus an array [] are equivalent.\n    - Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are equivalent.\n    - Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent.\n    - Two parameter declarations that differ only in their default arguments are equivalent. \n2. C++ allows member methods to be overloaded on the basis of const type. Overloading on the basis of const type can be useful when a function return reference or pointer.\n\n### Static:\n1. Static methods can only access static members (data and methods)\n\n\n### Inheritence:\n1. Assume that an integer takes 4 bytes: `sizeof(derived)` is 80. Since b1 and b2 both inherit from class base, two copies of class base are there in class derived.\n    ```\n    class base {\n        int arr[10];\n    };\n    class b1: public base { };\n    class b2: public base { };\n    class derived: public b1, public b2 {};\n    ```\n2. Assume that an integer takes 4 bytes: `sizeof(derived)` is 48. 8 extra bytes are for bookkeeping information stored by the compiler.\n    ```\n    class base {\n      int arr[10];     \n    };\n    class b1: virtual public base { };\n    class b2: virtual public base { };\n    class derived: public b1, public b2 {};\n     ```\n3. If there is multilevel inheritance, then function is linearly searched up in the inheritance hierarchy until a matching function is found.\n4. A base class pointer can point to a derived class object, but we can only access base class member or virtual functions using the base class pointer.\n5. If a derived class writes its own method, then all functions of base class with same name become hidden, even if signaures of base class functions are different. We can access base class functions using scope resolution operator even if they are made hidden by a derived class function. `Derived d; d.Base::fun(5);`\n6. When we assign an object of derived class to an object of base type, the derived class object is **sliced** off and all the data members inherited from base class are copied.\n7. The base class members cannot be directly assigned using initializer list. We should call the base class constructor in order to initialize base class members.\n8. This is a typical example of diamond problem of multiple inheritance. Here the base class member 'a' is inherited through both Derived1 and Derived2. So there are two copies of 'a' in DerivedDerived which makes the statement \"cout << a;\" ambiguous.\n    ```\n    class Base\n    {\n    protected:\n        int a;\n    public:\n        Base() {a = 0;}\n    };\n    class Derived1:  public Base\n    {\n    public:\n        int c;\n    };\n    class Derived2:  public Base\n    {\n    public:\n        int c;\n    };\n    class DerivedDerived: public Derived1, public Derived2\n    {\n    public:\n        void show()  {   cout << a;  }\n    };\n    int main(void)\n    {\n        DerivedDerived d;\n        d.show();\n        return 0;\n    }\n    ```\n    \n### Virtual:\n1. If a class has a pure virtual function, it becomes an abstract class and an instance of it cannot be created.\n2. If we don't override the pure virtual function in derived class, then derived class also becomes abstract class.\n3. There is nothing like Virtual Constructor. Making constructors virtual doesn't make sense as constructor is responsible for creating an object and it can’t be delegated to any other object by virtual keyword means.\n4. A destructor can be virtual. We may want to call appropriate destructor when a base class pointer points to a derived class object and we delete the object. If destructor is not virtual, then only the base class destructor may be called. If the destructor is vitrual, the derived class destructor is called which in turn calls base class destructor.\n    ```\n    Base *Var = new Derived();\n    delete Var;\n    // but below will call both\n    {\n        Derived Var;\n    }\n    ```\n5.  Compiler places a VPTR with every object.\n6.  When a class has a virtual function, functions with same signature in all descendant classes automatically become virtual. \n\n### Const:\n1. A const object can only call const functions.\n2. `const char* a = \"Anthony\";`\n    is:\n    ```\n    const char string_literal[] = \"Anthony\";\n    const char *a = string_literal;\n    ```\n\n### New & Delete:\n1. It is undefined behavior to call delete twice on a pointer. Anything can happen, the program may crash or produce nothing.\n\n### Exception handling:\n1. try, catch, and throw:\n    **throw** − A program throws an exception when a problem shows up. This is done using a throw keyword.\n    **catch** − A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.\n    **try** − A try block identifies a block of code for which particular exceptions will be activated. It's followed by one or more catch blocks.\n2. If both base and derived classes are caught as exceptions then catch block of derived class must appear before the base class. If we put base class first then the derived class catch block will never be reached. \n3. Note that the implicit type conversion doesn't happen when exceptions are caught. eg. The character is not automatically converted to int.\n4. It is compiler error to put catch all block before any other catch. The catch(...) must be the last catch block.\n5. The statement `throw;` is used to re-throw an exception:\n    ```\n    try {\n        try\n        {\n            throw 20;\n        }\n        catch (int n)\n        {\n            cout << \"Inner Catchn\";\n            throw;\n        }\n    }\n    catch (int x)\n    {\n        cout << \"Outer Catchn\";\n    }\n    ```\n6. When an object is created inside a try block, destructor for the object is called before control is transferred to catch block.\n7. When an exception is thrown and not caught, the program terminates abnormally.\n\n### Friend:\n1. Friendship is not inherited.\n\n","slug":"C-note-2","published":1,"updated":"2021-01-20T21:23:57.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt6w00021zjx40fu3z8u","content":"<h3 id=\"‘this’-Pointer\"><a href=\"#‘this’-Pointer\" class=\"headerlink\" title=\"‘this’ Pointer:\"></a>‘this’ Pointer:</h3><ol>\n<li>Passed as a hidden argument to all non-static member function calls and is available as a local variable within the body of all non-static functions.</li>\n<li><code>this</code> is a const pointer.</li>\n<li>Objects can destroy themselves by calling the following code <code>delete this;</code>. </li>\n</ol>\n<h3 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept:\"></a>Concept:</h3><ol>\n<li><strong>C++ polymorphism</strong> means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.</li>\n</ol>\n<h3 id=\"Function-overloading\"><a href=\"#Function-overloading\" class=\"headerlink\" title=\"Function overloading:\"></a>Function overloading:</h3><ol>\n<li>In C++, following function declarations <a href=\"https://www.geeksforgeeks.org/function-overloading-in-c/\" target=\"_blank\" rel=\"noopener\">cannot be overloaded</a>.<ul>\n<li>Function declarations that differ only in the return type.</li>\n<li>Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration.</li>\n<li>Parameter declarations that differ only in a pointer * versus an array [] are equivalent.</li>\n<li>Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are equivalent.</li>\n<li>Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent.</li>\n<li>Two parameter declarations that differ only in their default arguments are equivalent. </li>\n</ul>\n</li>\n<li>C++ allows member methods to be overloaded on the basis of const type. Overloading on the basis of const type can be useful when a function return reference or pointer.</li>\n</ol>\n<h3 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static:\"></a>Static:</h3><ol>\n<li>Static methods can only access static members (data and methods)</li>\n</ol>\n<h3 id=\"Inheritence\"><a href=\"#Inheritence\" class=\"headerlink\" title=\"Inheritence:\"></a>Inheritence:</h3><ol>\n<li><p>Assume that an integer takes 4 bytes: <code>sizeof(derived)</code> is 80. Since b1 and b2 both inherit from class base, two copies of class base are there in class derived.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class base &#123;</span><br><span class=\"line\">    int arr[10];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class b1: public base &#123; &#125;;</span><br><span class=\"line\">class b2: public base &#123; &#125;;</span><br><span class=\"line\">class derived: public b1, public b2 &#123;&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Assume that an integer takes 4 bytes: <code>sizeof(derived)</code> is 48. 8 extra bytes are for bookkeeping information stored by the compiler.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class base &#123;</span><br><span class=\"line\">  int arr[10];     </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class b1: virtual public base &#123; &#125;;</span><br><span class=\"line\">class b2: virtual public base &#123; &#125;;</span><br><span class=\"line\">class derived: public b1, public b2 &#123;&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>If there is multilevel inheritance, then function is linearly searched up in the inheritance hierarchy until a matching function is found.</p>\n</li>\n<li>A base class pointer can point to a derived class object, but we can only access base class member or virtual functions using the base class pointer.</li>\n<li>If a derived class writes its own method, then all functions of base class with same name become hidden, even if signaures of base class functions are different. We can access base class functions using scope resolution operator even if they are made hidden by a derived class function. <code>Derived d; d.Base::fun(5);</code></li>\n<li>When we assign an object of derived class to an object of base type, the derived class object is <strong>sliced</strong> off and all the data members inherited from base class are copied.</li>\n<li>The base class members cannot be directly assigned using initializer list. We should call the base class constructor in order to initialize base class members.</li>\n<li>This is a typical example of diamond problem of multiple inheritance. Here the base class member ‘a’ is inherited through both Derived1 and Derived2. So there are two copies of ‘a’ in DerivedDerived which makes the statement “cout &lt;&lt; a;” ambiguous. <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    Base() &#123;a = 0;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Derived1:  public Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Derived2:  public Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class DerivedDerived: public Derived1, public Derived2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void show()  &#123;   cout &lt;&lt; a;  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DerivedDerived d;</span><br><span class=\"line\">    d.show();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Virtual\"><a href=\"#Virtual\" class=\"headerlink\" title=\"Virtual:\"></a>Virtual:</h3><ol>\n<li>If a class has a pure virtual function, it becomes an abstract class and an instance of it cannot be created.</li>\n<li>If we don’t override the pure virtual function in derived class, then derived class also becomes abstract class.</li>\n<li>There is nothing like Virtual Constructor. Making constructors virtual doesn’t make sense as constructor is responsible for creating an object and it can’t be delegated to any other object by virtual keyword means.</li>\n<li><p>A destructor can be virtual. We may want to call appropriate destructor when a base class pointer points to a derived class object and we delete the object. If destructor is not virtual, then only the base class destructor may be called. If the destructor is vitrual, the derived class destructor is called which in turn calls base class destructor.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base *Var = new Derived();</span><br><span class=\"line\">delete Var;</span><br><span class=\"line\">// but below will call both</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Derived Var;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Compiler places a VPTR with every object.</p>\n</li>\n<li>When a class has a virtual function, functions with same signature in all descendant classes automatically become virtual. </li>\n</ol>\n<h3 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const:\"></a>Const:</h3><ol>\n<li>A const object can only call const functions.</li>\n<li><code>const char* a = &quot;Anthony&quot;;</code><br> is: <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const char string_literal[] = &quot;Anthony&quot;;</span><br><span class=\"line\">const char *a = string_literal;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"New-amp-Delete\"><a href=\"#New-amp-Delete\" class=\"headerlink\" title=\"New &amp; Delete:\"></a>New &amp; Delete:</h3><ol>\n<li>It is undefined behavior to call delete twice on a pointer. Anything can happen, the program may crash or produce nothing.</li>\n</ol>\n<h3 id=\"Exception-handling\"><a href=\"#Exception-handling\" class=\"headerlink\" title=\"Exception handling:\"></a>Exception handling:</h3><ol>\n<li>try, catch, and throw:<br> <strong>throw</strong> − A program throws an exception when a problem shows up. This is done using a throw keyword.<br> <strong>catch</strong> − A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.<br> <strong>try</strong> − A try block identifies a block of code for which particular exceptions will be activated. It’s followed by one or more catch blocks.</li>\n<li>If both base and derived classes are caught as exceptions then catch block of derived class must appear before the base class. If we put base class first then the derived class catch block will never be reached. </li>\n<li>Note that the implicit type conversion doesn’t happen when exceptions are caught. eg. The character is not automatically converted to int.</li>\n<li>It is compiler error to put catch all block before any other catch. The catch(…) must be the last catch block.</li>\n<li><p>The statement <code>throw;</code> is used to re-throw an exception:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        throw 20;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (int n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;Inner Catchn&quot;;</span><br><span class=\"line\">        throw;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;Outer Catchn&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>When an object is created inside a try block, destructor for the object is called before control is transferred to catch block.</p>\n</li>\n<li>When an exception is thrown and not caught, the program terminates abnormally.</li>\n</ol>\n<h3 id=\"Friend\"><a href=\"#Friend\" class=\"headerlink\" title=\"Friend:\"></a>Friend:</h3><ol>\n<li>Friendship is not inherited.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"‘this’-Pointer\"><a href=\"#‘this’-Pointer\" class=\"headerlink\" title=\"‘this’ Pointer:\"></a>‘this’ Pointer:</h3><ol>\n<li>Passed as a hidden argument to all non-static member function calls and is available as a local variable within the body of all non-static functions.</li>\n<li><code>this</code> is a const pointer.</li>\n<li>Objects can destroy themselves by calling the following code <code>delete this;</code>. </li>\n</ol>\n<h3 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept:\"></a>Concept:</h3><ol>\n<li><strong>C++ polymorphism</strong> means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.</li>\n</ol>\n<h3 id=\"Function-overloading\"><a href=\"#Function-overloading\" class=\"headerlink\" title=\"Function overloading:\"></a>Function overloading:</h3><ol>\n<li>In C++, following function declarations <a href=\"https://www.geeksforgeeks.org/function-overloading-in-c/\" target=\"_blank\" rel=\"noopener\">cannot be overloaded</a>.<ul>\n<li>Function declarations that differ only in the return type.</li>\n<li>Member function declarations with the same name and the name parameter-type-list cannot be overloaded if any of them is a static member function declaration.</li>\n<li>Parameter declarations that differ only in a pointer * versus an array [] are equivalent.</li>\n<li>Parameter declarations that differ only in that one is a function type and the other is a pointer to the same function type are equivalent.</li>\n<li>Parameter declarations that differ only in the presence or absence of const and/or volatile are equivalent.</li>\n<li>Two parameter declarations that differ only in their default arguments are equivalent. </li>\n</ul>\n</li>\n<li>C++ allows member methods to be overloaded on the basis of const type. Overloading on the basis of const type can be useful when a function return reference or pointer.</li>\n</ol>\n<h3 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static:\"></a>Static:</h3><ol>\n<li>Static methods can only access static members (data and methods)</li>\n</ol>\n<h3 id=\"Inheritence\"><a href=\"#Inheritence\" class=\"headerlink\" title=\"Inheritence:\"></a>Inheritence:</h3><ol>\n<li><p>Assume that an integer takes 4 bytes: <code>sizeof(derived)</code> is 80. Since b1 and b2 both inherit from class base, two copies of class base are there in class derived.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class base &#123;</span><br><span class=\"line\">    int arr[10];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class b1: public base &#123; &#125;;</span><br><span class=\"line\">class b2: public base &#123; &#125;;</span><br><span class=\"line\">class derived: public b1, public b2 &#123;&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Assume that an integer takes 4 bytes: <code>sizeof(derived)</code> is 48. 8 extra bytes are for bookkeeping information stored by the compiler.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class base &#123;</span><br><span class=\"line\">  int arr[10];     </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class b1: virtual public base &#123; &#125;;</span><br><span class=\"line\">class b2: virtual public base &#123; &#125;;</span><br><span class=\"line\">class derived: public b1, public b2 &#123;&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>If there is multilevel inheritance, then function is linearly searched up in the inheritance hierarchy until a matching function is found.</p>\n</li>\n<li>A base class pointer can point to a derived class object, but we can only access base class member or virtual functions using the base class pointer.</li>\n<li>If a derived class writes its own method, then all functions of base class with same name become hidden, even if signaures of base class functions are different. We can access base class functions using scope resolution operator even if they are made hidden by a derived class function. <code>Derived d; d.Base::fun(5);</code></li>\n<li>When we assign an object of derived class to an object of base type, the derived class object is <strong>sliced</strong> off and all the data members inherited from base class are copied.</li>\n<li>The base class members cannot be directly assigned using initializer list. We should call the base class constructor in order to initialize base class members.</li>\n<li>This is a typical example of diamond problem of multiple inheritance. Here the base class member ‘a’ is inherited through both Derived1 and Derived2. So there are two copies of ‘a’ in DerivedDerived which makes the statement “cout &lt;&lt; a;” ambiguous. <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">protected:</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    Base() &#123;a = 0;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Derived1:  public Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class Derived2:  public Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">class DerivedDerived: public Derived1, public Derived2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    void show()  &#123;   cout &lt;&lt; a;  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DerivedDerived d;</span><br><span class=\"line\">    d.show();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Virtual\"><a href=\"#Virtual\" class=\"headerlink\" title=\"Virtual:\"></a>Virtual:</h3><ol>\n<li>If a class has a pure virtual function, it becomes an abstract class and an instance of it cannot be created.</li>\n<li>If we don’t override the pure virtual function in derived class, then derived class also becomes abstract class.</li>\n<li>There is nothing like Virtual Constructor. Making constructors virtual doesn’t make sense as constructor is responsible for creating an object and it can’t be delegated to any other object by virtual keyword means.</li>\n<li><p>A destructor can be virtual. We may want to call appropriate destructor when a base class pointer points to a derived class object and we delete the object. If destructor is not virtual, then only the base class destructor may be called. If the destructor is vitrual, the derived class destructor is called which in turn calls base class destructor.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base *Var = new Derived();</span><br><span class=\"line\">delete Var;</span><br><span class=\"line\">// but below will call both</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Derived Var;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Compiler places a VPTR with every object.</p>\n</li>\n<li>When a class has a virtual function, functions with same signature in all descendant classes automatically become virtual. </li>\n</ol>\n<h3 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const:\"></a>Const:</h3><ol>\n<li>A const object can only call const functions.</li>\n<li><code>const char* a = &quot;Anthony&quot;;</code><br> is: <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const char string_literal[] = &quot;Anthony&quot;;</span><br><span class=\"line\">const char *a = string_literal;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"New-amp-Delete\"><a href=\"#New-amp-Delete\" class=\"headerlink\" title=\"New &amp; Delete:\"></a>New &amp; Delete:</h3><ol>\n<li>It is undefined behavior to call delete twice on a pointer. Anything can happen, the program may crash or produce nothing.</li>\n</ol>\n<h3 id=\"Exception-handling\"><a href=\"#Exception-handling\" class=\"headerlink\" title=\"Exception handling:\"></a>Exception handling:</h3><ol>\n<li>try, catch, and throw:<br> <strong>throw</strong> − A program throws an exception when a problem shows up. This is done using a throw keyword.<br> <strong>catch</strong> − A program catches an exception with an exception handler at the place in a program where you want to handle the problem. The catch keyword indicates the catching of an exception.<br> <strong>try</strong> − A try block identifies a block of code for which particular exceptions will be activated. It’s followed by one or more catch blocks.</li>\n<li>If both base and derived classes are caught as exceptions then catch block of derived class must appear before the base class. If we put base class first then the derived class catch block will never be reached. </li>\n<li>Note that the implicit type conversion doesn’t happen when exceptions are caught. eg. The character is not automatically converted to int.</li>\n<li>It is compiler error to put catch all block before any other catch. The catch(…) must be the last catch block.</li>\n<li><p>The statement <code>throw;</code> is used to re-throw an exception:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        throw 20;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch (int n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;Inner Catchn&quot;;</span><br><span class=\"line\">        throw;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;Outer Catchn&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>When an object is created inside a try block, destructor for the object is called before control is transferred to catch block.</p>\n</li>\n<li>When an exception is thrown and not caught, the program terminates abnormally.</li>\n</ol>\n<h3 id=\"Friend\"><a href=\"#Friend\" class=\"headerlink\" title=\"Friend:\"></a>Friend:</h3><ol>\n<li>Friendship is not inherited.</li>\n</ol>\n"},{"title":"C++ note 1","date":"2020-09-10T07:38:08.000Z","_content":"### Constructor:\n1. In C++, if we do not write our own, then compiler automatically creates a default constructor, a copy constructor and an assignment operator for every class. If we write any constructor, then compiler doesn't create the default constructor.\n2. When is copy constructor called?\n    - When an object of the class is returned by value.\n    - When an object of the class is passed (to a function) by value as an argument.\n    - When an object is constructed based on another object of the same class.\n    - When compiler generates a temporary object.\n    - (Note: It is however, not guaranteed that a copy constructor will be called in all these cases, because the C++ Standard allows the compiler to optimize the copy away in certain cases, one example being the return value optimization (sometimes referred to as RVO). [RVO](https://en.wikipedia.org/wiki/Copy_elision#Return_value_optimization) is a compiler optimization that involves eliminating the temporary object created to hold a function's return value.)\n3. When should we write our own assignment operator in C++?\n    - The answer is same as Copy Constructor. If a class doesn’t contain pointers, then there is no need to write assignment operator and copy constructor. \n    - (Note: [Self assignment](https://isocpp.org/wiki/faq/assignment-operators))\n4. Assignment operator & Copy constructor\n    ```cpp\n    class Point {\n    public:\n        Point() { cout << \"Normal Constructor calledn\"; }\n        Point(const Point &t) { cout << \"Copy constructor calledn\"; }\n    };\n \n    Point *t1, *t2;   // No constructor call\n    t1 = new Point(10, 15);  // Normal constructor call\n    t2 = new Point(*t1);   // Copy constructor call \n    Point t3 = *t1;  // Copy Constructor call\n                    // ('X b = a;' calls copy constructor\n                    // and is same as 'X b(a);')\n    Point t4;   // Normal Constructor call\n    t4 = t3;   // Assignment operator call \n    ```\n5. Copy constructor: Objects must be passed by reference in copy constructors. Compiler checks for this and produces compiler error if not passed by reference. Also, copy constructor argument should be const.\n    ```cpp\n    #include<iostream>\n    using namespace std;\n    class Point {\n        int x;\n    public:\n        Point(int x) { this->x = x; }\n        Point(const Point p) { x = p.x;} // Compiler Error: p must be passed by reference\n        int getX() { return x; }\n    };\n    ```\n6. When do we use [Initializer List](https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/) in C++?\n    - For initialization of non-static const data members.\n    - Reference members must be initialized using Initializer List.\n    - For initialization of member objects which do not have default constructor.\n    - For initialization of base class members.\n    - When constructor’s parameter name is same as data member, either use this pointer or Initializer List\n    - Performance reasons: It is better to initialize all class variables in Initializer List instead of assigning values inside body.\n7. Constructors cannot be virtual.\n8. If a class has a constructor which can be called with a single argument, then this constructor becomes conversion constructor because such a constructor allows automatic conversion to the class being constructed. \n9. Consider the following statement `Test *ptr = new Test; ` There are actually two things that happen in the above statement--memory allocation and object construction; the new keyword is responsible for both. One step in the process is to call operator new in order to allocate memory; the other step is to actually invoke the constructor. Operator new only allows us to change the memory allocation method, but does not do anything with the constructor calling method. Keyword new is responsible for calling the constructor, not operator new.\n\n### Destructor:\n1. Destructors can be private. then `Test t;` would compile error, `Test *t;` would be fine.\n2. There can be only one destructor in a class.\n\n### Reference:\n1. When a function returns by reference, it can be used as lvalue. Since x is a static variable, it is shared among function calls and the initialization line \"static int x = 10;\" is executed only once. The function call fun() = 30, modifies x to 30. The next call \"cout << fun()\" returns the modified value.\n    ```cpp\n    #include<iostream>\n    using namespace std;\n     \n    int &fun()\n    {\n        static int x = 10;\n        return x;\n    }\n    int main()\n    {\n        fun() = 30;\n        cout << fun();\n        return 0;\n    }\n    ```\n    \n2. Since we return reference to a local variable, the memory location becomes invalid after function call is over. Hence it may result in segmentation fault runtime error.\n    ```cpp\n    #include<iostream>\n    using namespace std;\n     \n    int &fun()\n    {\n        int x = 10;\n        return x;\n    }\n    int main()\n    {\n        fun() = 30;\n        cout << fun();\n        return 0;\n    }\n    ```\n    \n### Class:\n1. The size of an empty class not zero, it is 1 byte generally. It is nonzero to ensure that the two different objects will have different addresses.\n2. The static variables are stored in the data segment of the memory. The data segment is a part of the virtual address space of a program. All the static variables that do not have an explicit initialization or are initialized to zero are stored in the uninitialized data segment( also known as the BSS segment).\n3. Which of the following is not correct for virtual function in C++ ?\n(A) Must be declared in public section of class.\n(B) Virtual function **can't** be static.\n(C) Virtual function should be accessed using pointers.\n(D) Virtual function is defined in base class.\n4. Association, Composition, Aggregation\n    - **Association**\nAssociation refers to the relationship between multiple objects. It refers to how objects are related to each other and how they are using each other's functionality. Composition and aggregation are two types of association.\n    - **Composition**\nThe composition is the strong type of association. An association is said to composition if an Object owns another object and another object cannot exist without the owner object. Consider the case of Human having a heart. Here Human object contains the heart and heart cannot exist without Human.\n    - **Aggregation**\nAggregation is a weak association. An association is said to be aggregation if both Objects can exist independently. For example, a Team object and a Player object. The team contains multiple players but a player can exist without a team.\n5. Interfaces (Abstract Classes)\n    - A class is made abstract by declaring at least one of its functions as pure virtual function.\n    - Abstract classes cannot be used to instantiate objects and serves only as an interface. Attempting to instantiate an object of an abstract class causes a compilation error.\n    - If a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.\n\n### Template:\n1. When the compiler encounters this call to a template function, it uses the template to automatically generate a function replacing each appearance of myType by the type passed as the actual template parameter (int in this case) and then calls it. This process is automatically performed by the compiler and is invisible to the programmer.\n2. The format for declaring function templates with type parameters is (indistinct):\n    ```\n    template <class identifier> function_declaration;\n    template <typename identifier> function_declaration;\n    ```\n3. Template for Class\n    ```\n    template <class T>\n    class mypair {\n        T values [2];\n      public:\n        mypair (T first, T second)\n        {\n          values[0]=first; values[1]=second;\n        }\n    };\n    ```\n4. Non-type parameters for templates, must be const\n    ```\n    template <class T, int N>\n    class mysequence {\n        ...\n    };\n    mysequence <double, 5> myints;\n    ```\n5. Because templates are compiled when required, this forces a restriction for multi-file projects: the implementation (definition) of a template class or function must be in the same file as its declaration.\n6. Template specialization. Sometime we want a different behaviour of a function/class template for a particular data type:\n    ```\n    template <class T>\n    T max (T &a, T &b)\n    {\n        return (a > b)? a : b;\n    }\n     \n    template <>\n    int max <int> (int &a, int &b)\n    {\n        cout << \"Called \";\n        return (a > b)? a : b;\n    }\n    ```\n\n### Operator overloading:\n1. cout is an object of ostream class which is a compiler defined class. When we do \"cout << obj\" where obj is an object of our class, the compiler first looks for an operator function in ostream, then it looks for a global function. One way to overload insertion operator is to modify ostream class which may not be a good idea. So we make a global method.\n    ```\n    ostream & operator << (ostream &out, const Complex &c)\n    {\n        out << c.real;\n        out << \"+i\" << c.imag;\n        return out;\n    }\n    ```\n\n","source":"_posts/C-note-1.md","raw":"---\ntitle: C++ note 1\ndate: 2020-09-10 00:38:08\ntags: [cpp]\n---\n### Constructor:\n1. In C++, if we do not write our own, then compiler automatically creates a default constructor, a copy constructor and an assignment operator for every class. If we write any constructor, then compiler doesn't create the default constructor.\n2. When is copy constructor called?\n    - When an object of the class is returned by value.\n    - When an object of the class is passed (to a function) by value as an argument.\n    - When an object is constructed based on another object of the same class.\n    - When compiler generates a temporary object.\n    - (Note: It is however, not guaranteed that a copy constructor will be called in all these cases, because the C++ Standard allows the compiler to optimize the copy away in certain cases, one example being the return value optimization (sometimes referred to as RVO). [RVO](https://en.wikipedia.org/wiki/Copy_elision#Return_value_optimization) is a compiler optimization that involves eliminating the temporary object created to hold a function's return value.)\n3. When should we write our own assignment operator in C++?\n    - The answer is same as Copy Constructor. If a class doesn’t contain pointers, then there is no need to write assignment operator and copy constructor. \n    - (Note: [Self assignment](https://isocpp.org/wiki/faq/assignment-operators))\n4. Assignment operator & Copy constructor\n    ```cpp\n    class Point {\n    public:\n        Point() { cout << \"Normal Constructor calledn\"; }\n        Point(const Point &t) { cout << \"Copy constructor calledn\"; }\n    };\n \n    Point *t1, *t2;   // No constructor call\n    t1 = new Point(10, 15);  // Normal constructor call\n    t2 = new Point(*t1);   // Copy constructor call \n    Point t3 = *t1;  // Copy Constructor call\n                    // ('X b = a;' calls copy constructor\n                    // and is same as 'X b(a);')\n    Point t4;   // Normal Constructor call\n    t4 = t3;   // Assignment operator call \n    ```\n5. Copy constructor: Objects must be passed by reference in copy constructors. Compiler checks for this and produces compiler error if not passed by reference. Also, copy constructor argument should be const.\n    ```cpp\n    #include<iostream>\n    using namespace std;\n    class Point {\n        int x;\n    public:\n        Point(int x) { this->x = x; }\n        Point(const Point p) { x = p.x;} // Compiler Error: p must be passed by reference\n        int getX() { return x; }\n    };\n    ```\n6. When do we use [Initializer List](https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/) in C++?\n    - For initialization of non-static const data members.\n    - Reference members must be initialized using Initializer List.\n    - For initialization of member objects which do not have default constructor.\n    - For initialization of base class members.\n    - When constructor’s parameter name is same as data member, either use this pointer or Initializer List\n    - Performance reasons: It is better to initialize all class variables in Initializer List instead of assigning values inside body.\n7. Constructors cannot be virtual.\n8. If a class has a constructor which can be called with a single argument, then this constructor becomes conversion constructor because such a constructor allows automatic conversion to the class being constructed. \n9. Consider the following statement `Test *ptr = new Test; ` There are actually two things that happen in the above statement--memory allocation and object construction; the new keyword is responsible for both. One step in the process is to call operator new in order to allocate memory; the other step is to actually invoke the constructor. Operator new only allows us to change the memory allocation method, but does not do anything with the constructor calling method. Keyword new is responsible for calling the constructor, not operator new.\n\n### Destructor:\n1. Destructors can be private. then `Test t;` would compile error, `Test *t;` would be fine.\n2. There can be only one destructor in a class.\n\n### Reference:\n1. When a function returns by reference, it can be used as lvalue. Since x is a static variable, it is shared among function calls and the initialization line \"static int x = 10;\" is executed only once. The function call fun() = 30, modifies x to 30. The next call \"cout << fun()\" returns the modified value.\n    ```cpp\n    #include<iostream>\n    using namespace std;\n     \n    int &fun()\n    {\n        static int x = 10;\n        return x;\n    }\n    int main()\n    {\n        fun() = 30;\n        cout << fun();\n        return 0;\n    }\n    ```\n    \n2. Since we return reference to a local variable, the memory location becomes invalid after function call is over. Hence it may result in segmentation fault runtime error.\n    ```cpp\n    #include<iostream>\n    using namespace std;\n     \n    int &fun()\n    {\n        int x = 10;\n        return x;\n    }\n    int main()\n    {\n        fun() = 30;\n        cout << fun();\n        return 0;\n    }\n    ```\n    \n### Class:\n1. The size of an empty class not zero, it is 1 byte generally. It is nonzero to ensure that the two different objects will have different addresses.\n2. The static variables are stored in the data segment of the memory. The data segment is a part of the virtual address space of a program. All the static variables that do not have an explicit initialization or are initialized to zero are stored in the uninitialized data segment( also known as the BSS segment).\n3. Which of the following is not correct for virtual function in C++ ?\n(A) Must be declared in public section of class.\n(B) Virtual function **can't** be static.\n(C) Virtual function should be accessed using pointers.\n(D) Virtual function is defined in base class.\n4. Association, Composition, Aggregation\n    - **Association**\nAssociation refers to the relationship between multiple objects. It refers to how objects are related to each other and how they are using each other's functionality. Composition and aggregation are two types of association.\n    - **Composition**\nThe composition is the strong type of association. An association is said to composition if an Object owns another object and another object cannot exist without the owner object. Consider the case of Human having a heart. Here Human object contains the heart and heart cannot exist without Human.\n    - **Aggregation**\nAggregation is a weak association. An association is said to be aggregation if both Objects can exist independently. For example, a Team object and a Player object. The team contains multiple players but a player can exist without a team.\n5. Interfaces (Abstract Classes)\n    - A class is made abstract by declaring at least one of its functions as pure virtual function.\n    - Abstract classes cannot be used to instantiate objects and serves only as an interface. Attempting to instantiate an object of an abstract class causes a compilation error.\n    - If a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.\n\n### Template:\n1. When the compiler encounters this call to a template function, it uses the template to automatically generate a function replacing each appearance of myType by the type passed as the actual template parameter (int in this case) and then calls it. This process is automatically performed by the compiler and is invisible to the programmer.\n2. The format for declaring function templates with type parameters is (indistinct):\n    ```\n    template <class identifier> function_declaration;\n    template <typename identifier> function_declaration;\n    ```\n3. Template for Class\n    ```\n    template <class T>\n    class mypair {\n        T values [2];\n      public:\n        mypair (T first, T second)\n        {\n          values[0]=first; values[1]=second;\n        }\n    };\n    ```\n4. Non-type parameters for templates, must be const\n    ```\n    template <class T, int N>\n    class mysequence {\n        ...\n    };\n    mysequence <double, 5> myints;\n    ```\n5. Because templates are compiled when required, this forces a restriction for multi-file projects: the implementation (definition) of a template class or function must be in the same file as its declaration.\n6. Template specialization. Sometime we want a different behaviour of a function/class template for a particular data type:\n    ```\n    template <class T>\n    T max (T &a, T &b)\n    {\n        return (a > b)? a : b;\n    }\n     \n    template <>\n    int max <int> (int &a, int &b)\n    {\n        cout << \"Called \";\n        return (a > b)? a : b;\n    }\n    ```\n\n### Operator overloading:\n1. cout is an object of ostream class which is a compiler defined class. When we do \"cout << obj\" where obj is an object of our class, the compiler first looks for an operator function in ostream, then it looks for a global function. One way to overload insertion operator is to modify ostream class which may not be a good idea. So we make a global method.\n    ```\n    ostream & operator << (ostream &out, const Complex &c)\n    {\n        out << c.real;\n        out << \"+i\" << c.imag;\n        return out;\n    }\n    ```\n\n","slug":"C-note-1","published":1,"updated":"2021-01-20T21:23:57.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt6z00051zjxwqczilxj","content":"<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor:\"></a>Constructor:</h3><ol>\n<li>In C++, if we do not write our own, then compiler automatically creates a default constructor, a copy constructor and an assignment operator for every class. If we write any constructor, then compiler doesn’t create the default constructor.</li>\n<li>When is copy constructor called?<ul>\n<li>When an object of the class is returned by value.</li>\n<li>When an object of the class is passed (to a function) by value as an argument.</li>\n<li>When an object is constructed based on another object of the same class.</li>\n<li>When compiler generates a temporary object.</li>\n<li>(Note: It is however, not guaranteed that a copy constructor will be called in all these cases, because the C++ Standard allows the compiler to optimize the copy away in certain cases, one example being the return value optimization (sometimes referred to as RVO). <a href=\"https://en.wikipedia.org/wiki/Copy_elision#Return_value_optimization\" target=\"_blank\" rel=\"noopener\">RVO</a> is a compiler optimization that involves eliminating the temporary object created to hold a function’s return value.)</li>\n</ul>\n</li>\n<li>When should we write our own assignment operator in C++?<ul>\n<li>The answer is same as Copy Constructor. If a class doesn’t contain pointers, then there is no need to write assignment operator and copy constructor. </li>\n<li>(Note: <a href=\"https://isocpp.org/wiki/faq/assignment-operators\" target=\"_blank\" rel=\"noopener\">Self assignment</a>)</li>\n</ul>\n</li>\n<li><p>Assignment operator &amp; Copy constructor</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Normal Constructor calledn\"</span>; &#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">const</span> Point &amp;t) &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Copy constructor calledn\"</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">Point *t1, *t2;   <span class=\"comment\">// No constructor call</span></span><br><span class=\"line\">t1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">10</span>, <span class=\"number\">15</span>);  <span class=\"comment\">// Normal constructor call</span></span><br><span class=\"line\">t2 = <span class=\"keyword\">new</span> Point(*t1);   <span class=\"comment\">// Copy constructor call </span></span><br><span class=\"line\">Point t3 = *t1;  <span class=\"comment\">// Copy Constructor call</span></span><br><span class=\"line\">                <span class=\"comment\">// ('X b = a;' calls copy constructor</span></span><br><span class=\"line\">                <span class=\"comment\">// and is same as 'X b(a);')</span></span><br><span class=\"line\">Point t4;   <span class=\"comment\">// Normal Constructor call</span></span><br><span class=\"line\">t4 = t3;   <span class=\"comment\">// Assignment operator call</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Copy constructor: Objects must be passed by reference in copy constructors. Compiler checks for this and produces compiler error if not passed by reference. Also, copy constructor argument should be const.</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point(<span class=\"keyword\">int</span> x) &#123; <span class=\"keyword\">this</span>-&gt;x = x; &#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">const</span> Point p) &#123; x = p.x;&#125; <span class=\"comment\">// Compiler Error: p must be passed by reference</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>When do we use <a href=\"https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/\" target=\"_blank\" rel=\"noopener\">Initializer List</a> in C++?</p>\n<ul>\n<li>For initialization of non-static const data members.</li>\n<li>Reference members must be initialized using Initializer List.</li>\n<li>For initialization of member objects which do not have default constructor.</li>\n<li>For initialization of base class members.</li>\n<li>When constructor’s parameter name is same as data member, either use this pointer or Initializer List</li>\n<li>Performance reasons: It is better to initialize all class variables in Initializer List instead of assigning values inside body.</li>\n</ul>\n</li>\n<li>Constructors cannot be virtual.</li>\n<li>If a class has a constructor which can be called with a single argument, then this constructor becomes conversion constructor because such a constructor allows automatic conversion to the class being constructed. </li>\n<li>Consider the following statement <code>Test *ptr = new Test;</code> There are actually two things that happen in the above statement–memory allocation and object construction; the new keyword is responsible for both. One step in the process is to call operator new in order to allocate memory; the other step is to actually invoke the constructor. Operator new only allows us to change the memory allocation method, but does not do anything with the constructor calling method. Keyword new is responsible for calling the constructor, not operator new.</li>\n</ol>\n<h3 id=\"Destructor\"><a href=\"#Destructor\" class=\"headerlink\" title=\"Destructor:\"></a>Destructor:</h3><ol>\n<li>Destructors can be private. then <code>Test t;</code> would compile error, <code>Test *t;</code> would be fine.</li>\n<li>There can be only one destructor in a class.</li>\n</ol>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h3><ol>\n<li>When a function returns by reference, it can be used as lvalue. Since x is a static variable, it is shared among function calls and the initialization line “static int x = 10;” is executed only once. The function call fun() = 30, modifies x to 30. The next call “cout &lt;&lt; fun()” returns the modified value. <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> &amp;<span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fun() = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; fun();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li>Since we return reference to a local variable, the memory location becomes invalid after function call is over. Hence it may result in segmentation fault runtime error. <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> &amp;<span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fun() = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; fun();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class:\"></a>Class:</h3><ol>\n<li>The size of an empty class not zero, it is 1 byte generally. It is nonzero to ensure that the two different objects will have different addresses.</li>\n<li>The static variables are stored in the data segment of the memory. The data segment is a part of the virtual address space of a program. All the static variables that do not have an explicit initialization or are initialized to zero are stored in the uninitialized data segment( also known as the BSS segment).</li>\n<li>Which of the following is not correct for virtual function in C++ ?<br>(A) Must be declared in public section of class.<br>(B) Virtual function <strong>can’t</strong> be static.<br>(C) Virtual function should be accessed using pointers.<br>(D) Virtual function is defined in base class.</li>\n<li>Association, Composition, Aggregation<ul>\n<li><strong>Association</strong><br>Association refers to the relationship between multiple objects. It refers to how objects are related to each other and how they are using each other’s functionality. Composition and aggregation are two types of association.</li>\n<li><strong>Composition</strong><br>The composition is the strong type of association. An association is said to composition if an Object owns another object and another object cannot exist without the owner object. Consider the case of Human having a heart. Here Human object contains the heart and heart cannot exist without Human.</li>\n<li><strong>Aggregation</strong><br>Aggregation is a weak association. An association is said to be aggregation if both Objects can exist independently. For example, a Team object and a Player object. The team contains multiple players but a player can exist without a team.</li>\n</ul>\n</li>\n<li>Interfaces (Abstract Classes)<ul>\n<li>A class is made abstract by declaring at least one of its functions as pure virtual function.</li>\n<li>Abstract classes cannot be used to instantiate objects and serves only as an interface. Attempting to instantiate an object of an abstract class causes a compilation error.</li>\n<li>If a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Template\"><a href=\"#Template\" class=\"headerlink\" title=\"Template:\"></a>Template:</h3><ol>\n<li>When the compiler encounters this call to a template function, it uses the template to automatically generate a function replacing each appearance of myType by the type passed as the actual template parameter (int in this case) and then calls it. This process is automatically performed by the compiler and is invisible to the programmer.</li>\n<li><p>The format for declaring function templates with type parameters is (indistinct):</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class identifier&gt; function_declaration;</span><br><span class=\"line\">template &lt;typename identifier&gt; function_declaration;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Template for Class</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;</span><br><span class=\"line\">class mypair &#123;</span><br><span class=\"line\">    T values [2];</span><br><span class=\"line\">  public:</span><br><span class=\"line\">    mypair (T first, T second)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      values[0]=first; values[1]=second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Non-type parameters for templates, must be const</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T, int N&gt;</span><br><span class=\"line\">class mysequence &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">mysequence &lt;double, 5&gt; myints;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Because templates are compiled when required, this forces a restriction for multi-file projects: the implementation (definition) of a template class or function must be in the same file as its declaration.</p>\n</li>\n<li>Template specialization. Sometime we want a different behaviour of a function/class template for a particular data type: <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;</span><br><span class=\"line\">T max (T &amp;a, T &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return (a &gt; b)? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">template &lt;&gt;</span><br><span class=\"line\">int max &lt;int&gt; (int &amp;a, int &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;Called &quot;;</span><br><span class=\"line\">    return (a &gt; b)? a : b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Operator-overloading\"><a href=\"#Operator-overloading\" class=\"headerlink\" title=\"Operator overloading:\"></a>Operator overloading:</h3><ol>\n<li>cout is an object of ostream class which is a compiler defined class. When we do “cout &lt;&lt; obj” where obj is an object of our class, the compiler first looks for an operator function in ostream, then it looks for a global function. One way to overload insertion operator is to modify ostream class which may not be a good idea. So we make a global method. <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ostream &amp; operator &lt;&lt; (ostream &amp;out, const Complex &amp;c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    out &lt;&lt; c.real;</span><br><span class=\"line\">    out &lt;&lt; &quot;+i&quot; &lt;&lt; c.imag;</span><br><span class=\"line\">    return out;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"headerlink\" title=\"Constructor:\"></a>Constructor:</h3><ol>\n<li>In C++, if we do not write our own, then compiler automatically creates a default constructor, a copy constructor and an assignment operator for every class. If we write any constructor, then compiler doesn’t create the default constructor.</li>\n<li>When is copy constructor called?<ul>\n<li>When an object of the class is returned by value.</li>\n<li>When an object of the class is passed (to a function) by value as an argument.</li>\n<li>When an object is constructed based on another object of the same class.</li>\n<li>When compiler generates a temporary object.</li>\n<li>(Note: It is however, not guaranteed that a copy constructor will be called in all these cases, because the C++ Standard allows the compiler to optimize the copy away in certain cases, one example being the return value optimization (sometimes referred to as RVO). <a href=\"https://en.wikipedia.org/wiki/Copy_elision#Return_value_optimization\" target=\"_blank\" rel=\"noopener\">RVO</a> is a compiler optimization that involves eliminating the temporary object created to hold a function’s return value.)</li>\n</ul>\n</li>\n<li>When should we write our own assignment operator in C++?<ul>\n<li>The answer is same as Copy Constructor. If a class doesn’t contain pointers, then there is no need to write assignment operator and copy constructor. </li>\n<li>(Note: <a href=\"https://isocpp.org/wiki/faq/assignment-operators\" target=\"_blank\" rel=\"noopener\">Self assignment</a>)</li>\n</ul>\n</li>\n<li><p>Assignment operator &amp; Copy constructor</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Normal Constructor calledn\"</span>; &#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">const</span> Point &amp;t) &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Copy constructor calledn\"</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">Point *t1, *t2;   <span class=\"comment\">// No constructor call</span></span><br><span class=\"line\">t1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">10</span>, <span class=\"number\">15</span>);  <span class=\"comment\">// Normal constructor call</span></span><br><span class=\"line\">t2 = <span class=\"keyword\">new</span> Point(*t1);   <span class=\"comment\">// Copy constructor call </span></span><br><span class=\"line\">Point t3 = *t1;  <span class=\"comment\">// Copy Constructor call</span></span><br><span class=\"line\">                <span class=\"comment\">// ('X b = a;' calls copy constructor</span></span><br><span class=\"line\">                <span class=\"comment\">// and is same as 'X b(a);')</span></span><br><span class=\"line\">Point t4;   <span class=\"comment\">// Normal Constructor call</span></span><br><span class=\"line\">t4 = t3;   <span class=\"comment\">// Assignment operator call</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Copy constructor: Objects must be passed by reference in copy constructors. Compiler checks for this and produces compiler error if not passed by reference. Also, copy constructor argument should be const.</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Point(<span class=\"keyword\">int</span> x) &#123; <span class=\"keyword\">this</span>-&gt;x = x; &#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">const</span> Point p) &#123; x = p.x;&#125; <span class=\"comment\">// Compiler Error: p must be passed by reference</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>When do we use <a href=\"https://www.geeksforgeeks.org/when-do-we-use-initializer-list-in-c/\" target=\"_blank\" rel=\"noopener\">Initializer List</a> in C++?</p>\n<ul>\n<li>For initialization of non-static const data members.</li>\n<li>Reference members must be initialized using Initializer List.</li>\n<li>For initialization of member objects which do not have default constructor.</li>\n<li>For initialization of base class members.</li>\n<li>When constructor’s parameter name is same as data member, either use this pointer or Initializer List</li>\n<li>Performance reasons: It is better to initialize all class variables in Initializer List instead of assigning values inside body.</li>\n</ul>\n</li>\n<li>Constructors cannot be virtual.</li>\n<li>If a class has a constructor which can be called with a single argument, then this constructor becomes conversion constructor because such a constructor allows automatic conversion to the class being constructed. </li>\n<li>Consider the following statement <code>Test *ptr = new Test;</code> There are actually two things that happen in the above statement–memory allocation and object construction; the new keyword is responsible for both. One step in the process is to call operator new in order to allocate memory; the other step is to actually invoke the constructor. Operator new only allows us to change the memory allocation method, but does not do anything with the constructor calling method. Keyword new is responsible for calling the constructor, not operator new.</li>\n</ol>\n<h3 id=\"Destructor\"><a href=\"#Destructor\" class=\"headerlink\" title=\"Destructor:\"></a>Destructor:</h3><ol>\n<li>Destructors can be private. then <code>Test t;</code> would compile error, <code>Test *t;</code> would be fine.</li>\n<li>There can be only one destructor in a class.</li>\n</ol>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h3><ol>\n<li>When a function returns by reference, it can be used as lvalue. Since x is a static variable, it is shared among function calls and the initialization line “static int x = 10;” is executed only once. The function call fun() = 30, modifies x to 30. The next call “cout &lt;&lt; fun()” returns the modified value. <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> &amp;<span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fun() = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; fun();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li>Since we return reference to a local variable, the memory location becomes invalid after function call is over. Hence it may result in segmentation fault runtime error. <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> &amp;<span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fun() = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; fun();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Class\"><a href=\"#Class\" class=\"headerlink\" title=\"Class:\"></a>Class:</h3><ol>\n<li>The size of an empty class not zero, it is 1 byte generally. It is nonzero to ensure that the two different objects will have different addresses.</li>\n<li>The static variables are stored in the data segment of the memory. The data segment is a part of the virtual address space of a program. All the static variables that do not have an explicit initialization or are initialized to zero are stored in the uninitialized data segment( also known as the BSS segment).</li>\n<li>Which of the following is not correct for virtual function in C++ ?<br>(A) Must be declared in public section of class.<br>(B) Virtual function <strong>can’t</strong> be static.<br>(C) Virtual function should be accessed using pointers.<br>(D) Virtual function is defined in base class.</li>\n<li>Association, Composition, Aggregation<ul>\n<li><strong>Association</strong><br>Association refers to the relationship between multiple objects. It refers to how objects are related to each other and how they are using each other’s functionality. Composition and aggregation are two types of association.</li>\n<li><strong>Composition</strong><br>The composition is the strong type of association. An association is said to composition if an Object owns another object and another object cannot exist without the owner object. Consider the case of Human having a heart. Here Human object contains the heart and heart cannot exist without Human.</li>\n<li><strong>Aggregation</strong><br>Aggregation is a weak association. An association is said to be aggregation if both Objects can exist independently. For example, a Team object and a Player object. The team contains multiple players but a player can exist without a team.</li>\n</ul>\n</li>\n<li>Interfaces (Abstract Classes)<ul>\n<li>A class is made abstract by declaring at least one of its functions as pure virtual function.</li>\n<li>Abstract classes cannot be used to instantiate objects and serves only as an interface. Attempting to instantiate an object of an abstract class causes a compilation error.</li>\n<li>If a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Template\"><a href=\"#Template\" class=\"headerlink\" title=\"Template:\"></a>Template:</h3><ol>\n<li>When the compiler encounters this call to a template function, it uses the template to automatically generate a function replacing each appearance of myType by the type passed as the actual template parameter (int in this case) and then calls it. This process is automatically performed by the compiler and is invisible to the programmer.</li>\n<li><p>The format for declaring function templates with type parameters is (indistinct):</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class identifier&gt; function_declaration;</span><br><span class=\"line\">template &lt;typename identifier&gt; function_declaration;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Template for Class</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;</span><br><span class=\"line\">class mypair &#123;</span><br><span class=\"line\">    T values [2];</span><br><span class=\"line\">  public:</span><br><span class=\"line\">    mypair (T first, T second)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      values[0]=first; values[1]=second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Non-type parameters for templates, must be const</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T, int N&gt;</span><br><span class=\"line\">class mysequence &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">mysequence &lt;double, 5&gt; myints;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Because templates are compiled when required, this forces a restriction for multi-file projects: the implementation (definition) of a template class or function must be in the same file as its declaration.</p>\n</li>\n<li>Template specialization. Sometime we want a different behaviour of a function/class template for a particular data type: <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;</span><br><span class=\"line\">T max (T &amp;a, T &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return (a &gt; b)? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">template &lt;&gt;</span><br><span class=\"line\">int max &lt;int&gt; (int &amp;a, int &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cout &lt;&lt; &quot;Called &quot;;</span><br><span class=\"line\">    return (a &gt; b)? a : b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Operator-overloading\"><a href=\"#Operator-overloading\" class=\"headerlink\" title=\"Operator overloading:\"></a>Operator overloading:</h3><ol>\n<li>cout is an object of ostream class which is a compiler defined class. When we do “cout &lt;&lt; obj” where obj is an object of our class, the compiler first looks for an operator function in ostream, then it looks for a global function. One way to overload insertion operator is to modify ostream class which may not be a good idea. So we make a global method. <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ostream &amp; operator &lt;&lt; (ostream &amp;out, const Complex &amp;c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    out &lt;&lt; c.real;</span><br><span class=\"line\">    out &lt;&lt; &quot;+i&quot; &lt;&lt; c.imag;</span><br><span class=\"line\">    return out;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"C++ note 4 - Shared Pointer ","date":"2020-09-11T05:08:54.000Z","_content":"### Shared pointer:\n```\n#include <iostream>\n\nclass RC\n{\nprivate:\n    int count;\npublic:\n    RC() : count(0) {}\n    \n    int add() {\n        return ++count;\n    }\n    \n    int remove() {\n        return --count;\n    }\n    \n    int get() {\n        return count;\n    }\n};\n\ntemplate <class T>\nclass SP\n{\nprivate:\n    T* data;\n    RC* rc;\n    \npublic:\n    explicit SP(T* d) : data(d), rc(new RC()) {\n        rc->add();\n    }\n        \n    \n    SP(const SP<T>& sp) : data(sp.data), rc(sp.rc) {\n        rc->add();\n    }\n    \n    ~SP() {\n        if (rc->remove() == 0) {\n            delete data;\n            delete rc;\n        }\n    }\n    \n    SP<T>& operator = (const SP<T>& sp) {\n        if (this == &sp) return *this;\n        \n        if (rc->remove() == 0) {\n            delete data;\n            delete rc;\n        }\n        \n        data = sp.data;\n        rc = sp.rc;\n        rc->add();\n        return *this;\n    }\n    \n    void print() {\n        std::cout << \"data: \" << *data << std::endl;\n        std::cout << \"count: \" << rc->get() << std::endl;\n    }\n  \n};\n\nint main()\n{\n    SP<int> sp(new int(5));\n    sp.print();\n  \n    SP<int> sp2 = sp;\n    sp2.print();\n    \n    SP<int> sp3(new int(4));\n    sp3 = sp;\n    sp3.print();\n  \n    return 0;\n}\n```\n","source":"_posts/C-note-4-Shared-Pointer.md","raw":"---\ntitle: 'C++ note 4 - Shared Pointer '\ndate: 2020-09-10 22:08:54\ntags: [cpp]\n---\n### Shared pointer:\n```\n#include <iostream>\n\nclass RC\n{\nprivate:\n    int count;\npublic:\n    RC() : count(0) {}\n    \n    int add() {\n        return ++count;\n    }\n    \n    int remove() {\n        return --count;\n    }\n    \n    int get() {\n        return count;\n    }\n};\n\ntemplate <class T>\nclass SP\n{\nprivate:\n    T* data;\n    RC* rc;\n    \npublic:\n    explicit SP(T* d) : data(d), rc(new RC()) {\n        rc->add();\n    }\n        \n    \n    SP(const SP<T>& sp) : data(sp.data), rc(sp.rc) {\n        rc->add();\n    }\n    \n    ~SP() {\n        if (rc->remove() == 0) {\n            delete data;\n            delete rc;\n        }\n    }\n    \n    SP<T>& operator = (const SP<T>& sp) {\n        if (this == &sp) return *this;\n        \n        if (rc->remove() == 0) {\n            delete data;\n            delete rc;\n        }\n        \n        data = sp.data;\n        rc = sp.rc;\n        rc->add();\n        return *this;\n    }\n    \n    void print() {\n        std::cout << \"data: \" << *data << std::endl;\n        std::cout << \"count: \" << rc->get() << std::endl;\n    }\n  \n};\n\nint main()\n{\n    SP<int> sp(new int(5));\n    sp.print();\n  \n    SP<int> sp2 = sp;\n    sp2.print();\n    \n    SP<int> sp3(new int(4));\n    sp3 = sp;\n    sp3.print();\n  \n    return 0;\n}\n```\n","slug":"C-note-4-Shared-Pointer","published":1,"updated":"2021-01-20T21:23:57.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7100061zjxqld7aqz1","content":"<h3 id=\"Shared-pointer\"><a href=\"#Shared-pointer\" class=\"headerlink\" title=\"Shared pointer:\"></a>Shared pointer:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class RC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int count;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    RC() : count(0) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int add() &#123;</span><br><span class=\"line\">        return ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int remove() &#123;</span><br><span class=\"line\">        return --count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int get() &#123;</span><br><span class=\"line\">        return count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;class T&gt;</span><br><span class=\"line\">class SP</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    T* data;</span><br><span class=\"line\">    RC* rc;</span><br><span class=\"line\">    </span><br><span class=\"line\">public:</span><br><span class=\"line\">    explicit SP(T* d) : data(d), rc(new RC()) &#123;</span><br><span class=\"line\">        rc-&gt;add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    SP(const SP&lt;T&gt;&amp; sp) : data(sp.data), rc(sp.rc) &#123;</span><br><span class=\"line\">        rc-&gt;add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ~SP() &#123;</span><br><span class=\"line\">        if (rc-&gt;remove() == 0) &#123;</span><br><span class=\"line\">            delete data;</span><br><span class=\"line\">            delete rc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    SP&lt;T&gt;&amp; operator = (const SP&lt;T&gt;&amp; sp) &#123;</span><br><span class=\"line\">        if (this == &amp;sp) return *this;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (rc-&gt;remove() == 0) &#123;</span><br><span class=\"line\">            delete data;</span><br><span class=\"line\">            delete rc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = sp.data;</span><br><span class=\"line\">        rc = sp.rc;</span><br><span class=\"line\">        rc-&gt;add();</span><br><span class=\"line\">        return *this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void print() &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;data: &quot; &lt;&lt; *data &lt;&lt; std::endl;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;count: &quot; &lt;&lt; rc-&gt;get() &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SP&lt;int&gt; sp(new int(5));</span><br><span class=\"line\">    sp.print();</span><br><span class=\"line\">  </span><br><span class=\"line\">    SP&lt;int&gt; sp2 = sp;</span><br><span class=\"line\">    sp2.print();</span><br><span class=\"line\">    </span><br><span class=\"line\">    SP&lt;int&gt; sp3(new int(4));</span><br><span class=\"line\">    sp3 = sp;</span><br><span class=\"line\">    sp3.print();</span><br><span class=\"line\">  </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Shared-pointer\"><a href=\"#Shared-pointer\" class=\"headerlink\" title=\"Shared pointer:\"></a>Shared pointer:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class RC</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int count;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    RC() : count(0) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int add() &#123;</span><br><span class=\"line\">        return ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int remove() &#123;</span><br><span class=\"line\">        return --count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    int get() &#123;</span><br><span class=\"line\">        return count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;class T&gt;</span><br><span class=\"line\">class SP</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    T* data;</span><br><span class=\"line\">    RC* rc;</span><br><span class=\"line\">    </span><br><span class=\"line\">public:</span><br><span class=\"line\">    explicit SP(T* d) : data(d), rc(new RC()) &#123;</span><br><span class=\"line\">        rc-&gt;add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    SP(const SP&lt;T&gt;&amp; sp) : data(sp.data), rc(sp.rc) &#123;</span><br><span class=\"line\">        rc-&gt;add();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ~SP() &#123;</span><br><span class=\"line\">        if (rc-&gt;remove() == 0) &#123;</span><br><span class=\"line\">            delete data;</span><br><span class=\"line\">            delete rc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    SP&lt;T&gt;&amp; operator = (const SP&lt;T&gt;&amp; sp) &#123;</span><br><span class=\"line\">        if (this == &amp;sp) return *this;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if (rc-&gt;remove() == 0) &#123;</span><br><span class=\"line\">            delete data;</span><br><span class=\"line\">            delete rc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        data = sp.data;</span><br><span class=\"line\">        rc = sp.rc;</span><br><span class=\"line\">        rc-&gt;add();</span><br><span class=\"line\">        return *this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    void print() &#123;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;data: &quot; &lt;&lt; *data &lt;&lt; std::endl;</span><br><span class=\"line\">        std::cout &lt;&lt; &quot;count: &quot; &lt;&lt; rc-&gt;get() &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SP&lt;int&gt; sp(new int(5));</span><br><span class=\"line\">    sp.print();</span><br><span class=\"line\">  </span><br><span class=\"line\">    SP&lt;int&gt; sp2 = sp;</span><br><span class=\"line\">    sp2.print();</span><br><span class=\"line\">    </span><br><span class=\"line\">    SP&lt;int&gt; sp3(new int(4));</span><br><span class=\"line\">    sp3 = sp;</span><br><span class=\"line\">    sp3.print();</span><br><span class=\"line\">  </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"C++ note 3 - Singleton","date":"2020-09-11T00:42:27.000Z","_content":"### Singleton:\n1. Singleton design pattern is a software design principle that is used to restrict the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system\n2. Can act just like namespace\n3. A simple implementation:\n    ```\n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n\n            static Singleton Instance;\n            \n        public:\n            static Singleton& Get() {\n                return s_Instance;\n            }\n            void Func();\n    };\n    \n    Singleton Singleton::s_Instance;\n    \n    int main()\n    {\n        Singleton::Get().Func();\n        return 0;\n    }\n    ```\n4. Issues from above:\n    - One can do `Singleton instance = Singleton::Get();` instead of `Singleton& instance = Singleton::Get();` will copy all data in the Singleton and create an additional Singleton. Should mark the copy constructer, and the assignment operator as delete.\n    ```\n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n\n            static Singleton Instance;\n            \n        public:\n            Singleton(const Singleton&) = delete; // solve the issue\n            Singleton& operator=(const Singleton&) = delete;\n            static Singleton& Get() {\n                return s_Instance;\n            }\n            void Func();\n    };\n    ```\n5. Can remove the global initialization and create inside `Get()`.\n    ```\n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n        public:\n            Singleton(const Singleton&) = delete;\n            Singleton& operator=(const Singleton&) = delete;\n            static Singleton& Get() {\n                static Singleton s_Instance; // Init from here\n                return s_Instance;\n            }\n            void Func();\n    };\n    ```\n\n6. A final version:\n    ```\n    #include <iostream>\n    \n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n        public:\n            Singleton(const Singleton&) = delete;\n            Singleton& operator=(const Singleton&) = delete;\n            static Singleton& Get() {\n                static Singleton s_Instance; // Init from here\n                return s_Instance;\n            }\n            void Func() {\n              std::cout << \"Func called\" << std::endl;\n            };\n    };\n    \n    int main()\n    {\n      Singleton::Get().Func();\n      return 0;\n    }\n    ```\n","source":"_posts/C-note-3-Singleton.md","raw":"---\ntitle: C++ note 3 - Singleton\ndate: 2020-09-10 17:42:27\ntags: [cpp]\n---\n### Singleton:\n1. Singleton design pattern is a software design principle that is used to restrict the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system\n2. Can act just like namespace\n3. A simple implementation:\n    ```\n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n\n            static Singleton Instance;\n            \n        public:\n            static Singleton& Get() {\n                return s_Instance;\n            }\n            void Func();\n    };\n    \n    Singleton Singleton::s_Instance;\n    \n    int main()\n    {\n        Singleton::Get().Func();\n        return 0;\n    }\n    ```\n4. Issues from above:\n    - One can do `Singleton instance = Singleton::Get();` instead of `Singleton& instance = Singleton::Get();` will copy all data in the Singleton and create an additional Singleton. Should mark the copy constructer, and the assignment operator as delete.\n    ```\n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n\n            static Singleton Instance;\n            \n        public:\n            Singleton(const Singleton&) = delete; // solve the issue\n            Singleton& operator=(const Singleton&) = delete;\n            static Singleton& Get() {\n                return s_Instance;\n            }\n            void Func();\n    };\n    ```\n5. Can remove the global initialization and create inside `Get()`.\n    ```\n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n        public:\n            Singleton(const Singleton&) = delete;\n            Singleton& operator=(const Singleton&) = delete;\n            static Singleton& Get() {\n                static Singleton s_Instance; // Init from here\n                return s_Instance;\n            }\n            void Func();\n    };\n    ```\n\n6. A final version:\n    ```\n    #include <iostream>\n    \n    class Singleton\n    {\n        private:\n            Singleton() {} // Disable from instantiating\n        public:\n            Singleton(const Singleton&) = delete;\n            Singleton& operator=(const Singleton&) = delete;\n            static Singleton& Get() {\n                static Singleton s_Instance; // Init from here\n                return s_Instance;\n            }\n            void Func() {\n              std::cout << \"Func called\" << std::endl;\n            };\n    };\n    \n    int main()\n    {\n      Singleton::Get().Func();\n      return 0;\n    }\n    ```\n","slug":"C-note-3-Singleton","published":1,"updated":"2021-01-20T21:23:57.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7200071zjxm0so739c","content":"<h3 id=\"Singleton\"><a href=\"#Singleton\" class=\"headerlink\" title=\"Singleton:\"></a>Singleton:</h3><ol>\n<li>Singleton design pattern is a software design principle that is used to restrict the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system</li>\n<li>Can act just like namespace</li>\n<li><p>A simple implementation:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\"></span><br><span class=\"line\">        static Singleton Instance;</span><br><span class=\"line\">        </span><br><span class=\"line\">    public:</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Singleton Singleton::s_Instance;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Singleton::Get().Func();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Issues from above:</p>\n<ul>\n<li>One can do <code>Singleton instance = Singleton::Get();</code> instead of <code>Singleton&amp; instance = Singleton::Get();</code> will copy all data in the Singleton and create an additional Singleton. Should mark the copy constructer, and the assignment operator as delete.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\"></span><br><span class=\"line\">        static Singleton Instance;</span><br><span class=\"line\">        </span><br><span class=\"line\">    public:</span><br><span class=\"line\">        Singleton(const Singleton&amp;) = delete; // solve the issue</span><br><span class=\"line\">        Singleton&amp; operator=(const Singleton&amp;) = delete;</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Can remove the global initialization and create inside <code>Get()</code>.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        Singleton(const Singleton&amp;) = delete;</span><br><span class=\"line\">        Singleton&amp; operator=(const Singleton&amp;) = delete;</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            static Singleton s_Instance; // Init from here</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>A final version:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        Singleton(const Singleton&amp;) = delete;</span><br><span class=\"line\">        Singleton&amp; operator=(const Singleton&amp;) = delete;</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            static Singleton s_Instance; // Init from here</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func() &#123;</span><br><span class=\"line\">          std::cout &lt;&lt; &quot;Func called&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Singleton::Get().Func();</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Singleton\"><a href=\"#Singleton\" class=\"headerlink\" title=\"Singleton:\"></a>Singleton:</h3><ol>\n<li>Singleton design pattern is a software design principle that is used to restrict the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system</li>\n<li>Can act just like namespace</li>\n<li><p>A simple implementation:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\"></span><br><span class=\"line\">        static Singleton Instance;</span><br><span class=\"line\">        </span><br><span class=\"line\">    public:</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Singleton Singleton::s_Instance;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Singleton::Get().Func();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Issues from above:</p>\n<ul>\n<li>One can do <code>Singleton instance = Singleton::Get();</code> instead of <code>Singleton&amp; instance = Singleton::Get();</code> will copy all data in the Singleton and create an additional Singleton. Should mark the copy constructer, and the assignment operator as delete.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\"></span><br><span class=\"line\">        static Singleton Instance;</span><br><span class=\"line\">        </span><br><span class=\"line\">    public:</span><br><span class=\"line\">        Singleton(const Singleton&amp;) = delete; // solve the issue</span><br><span class=\"line\">        Singleton&amp; operator=(const Singleton&amp;) = delete;</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Can remove the global initialization and create inside <code>Get()</code>.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        Singleton(const Singleton&amp;) = delete;</span><br><span class=\"line\">        Singleton&amp; operator=(const Singleton&amp;) = delete;</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            static Singleton s_Instance; // Init from here</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>A final version:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private:</span><br><span class=\"line\">        Singleton() &#123;&#125; // Disable from instantiating</span><br><span class=\"line\">    public:</span><br><span class=\"line\">        Singleton(const Singleton&amp;) = delete;</span><br><span class=\"line\">        Singleton&amp; operator=(const Singleton&amp;) = delete;</span><br><span class=\"line\">        static Singleton&amp; Get() &#123;</span><br><span class=\"line\">            static Singleton s_Instance; // Init from here</span><br><span class=\"line\">            return s_Instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        void Func() &#123;</span><br><span class=\"line\">          std::cout &lt;&lt; &quot;Func called&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Singleton::Get().Func();</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Class definition in Python","date":"2016-10-16T02:57:44.000Z","_content":"**Python 3.x:**\n```python\nclass NewClass(object): \n```\nnew-style class\n```python\nclass NewClass:\n```\nnew-style class implicitly inherits from object\n\n**Python 2.x:**\n```python\nclass NewClass(object):\n```\nnew-style class\n```python\nclass NewClass:\n```\nold-style class(quite old, don't use)\n\nreference page:\n[Stack Overflow Answer](http://stackoverflow.com/questions/4015417/python-class-inherits-object)\n[Python Doc Discussion](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes)\n\n\n","source":"_posts/Class-definition-in-Python.md","raw":"---\ntitle: Class definition in Python\ndate: 2016-10-15 19:57:44\ntags: [python]\n---\n**Python 3.x:**\n```python\nclass NewClass(object): \n```\nnew-style class\n```python\nclass NewClass:\n```\nnew-style class implicitly inherits from object\n\n**Python 2.x:**\n```python\nclass NewClass(object):\n```\nnew-style class\n```python\nclass NewClass:\n```\nold-style class(quite old, don't use)\n\nreference page:\n[Stack Overflow Answer](http://stackoverflow.com/questions/4015417/python-class-inherits-object)\n[Python Doc Discussion](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes)\n\n\n","slug":"Class-definition-in-Python","published":1,"updated":"2021-01-20T21:23:57.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt73000a1zjxo30mylz4","content":"<p><strong>Python 3.x:</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span><span class=\"params\">(object)</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>new-style class<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>new-style class implicitly inherits from object</p>\n<p><strong>Python 2.x:</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span><span class=\"params\">(object)</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>new-style class<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>old-style class(quite old, don’t use)</p>\n<p>reference page:<br><a href=\"http://stackoverflow.com/questions/4015417/python-class-inherits-object\" target=\"_blank\" rel=\"noopener\">Stack Overflow Answer</a><br><a href=\"https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\" target=\"_blank\" rel=\"noopener\">Python Doc Discussion</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Python 3.x:</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span><span class=\"params\">(object)</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>new-style class<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>new-style class implicitly inherits from object</p>\n<p><strong>Python 2.x:</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span><span class=\"params\">(object)</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>new-style class<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewClass</span>:</span></span><br></pre></td></tr></table></figure></p>\n<p>old-style class(quite old, don’t use)</p>\n<p>reference page:<br><a href=\"http://stackoverflow.com/questions/4015417/python-class-inherits-object\" target=\"_blank\" rel=\"noopener\">Stack Overflow Answer</a><br><a href=\"https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\" target=\"_blank\" rel=\"noopener\">Python Doc Discussion</a></p>\n"},{"title":"'Is None' vs '== None' in Python","date":"2016-10-18T02:56:12.000Z","_content":"The reason for choosing\n```python\negg is None\n```\nover\n```python\negg == None\n```\nis: The operator \"==\" can be overloaded, and is likely to break when comparing valid object with None, while \"is\" always works the same.\n\nreference page:\n[Stack Overflow Answer](\"http://stackoverflow.com/questions/3289601/null-object-in-python\")\n\n","source":"_posts/Compare-None-in-Python.md","raw":"---\ntitle: '''Is None'' vs ''== None'' in Python'\ndate: 2016-10-17 19:56:12\ntags: [python]\n---\nThe reason for choosing\n```python\negg is None\n```\nover\n```python\negg == None\n```\nis: The operator \"==\" can be overloaded, and is likely to break when comparing valid object with None, while \"is\" always works the same.\n\nreference page:\n[Stack Overflow Answer](\"http://stackoverflow.com/questions/3289601/null-object-in-python\")\n\n","slug":"Compare-None-in-Python","published":1,"updated":"2021-01-20T21:23:57.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt74000b1zjxej2ngalx","content":"<p>The reason for choosing<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egg <span class=\"keyword\">is</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure></p>\n<p>over<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egg == <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure></p>\n<p>is: The operator “==” can be overloaded, and is likely to break when comparing valid object with None, while “is” always works the same.</p>\n<p>reference page:<br><a href=\"&quot;http://stackoverflow.com/questions/3289601/null-object-in-python&quot;\">Stack Overflow Answer</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>The reason for choosing<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egg <span class=\"keyword\">is</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure></p>\n<p>over<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">egg == <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure></p>\n<p>is: The operator “==” can be overloaded, and is likely to break when comparing valid object with None, while “is” always works the same.</p>\n<p>reference page:<br><a href=\"&quot;http://stackoverflow.com/questions/3289601/null-object-in-python&quot;\">Stack Overflow Answer</a></p>\n"},{"title":"Get to know MoCap","date":"2017-02-03T20:56:21.000Z","_content":"In this week, we went to the MoCap Lab, which is full of fancy tools for motion capture. MoCap is a great idea that makes animation, filmmaking and video games much easier and better. Usually, traditional 3D animation has to be manually made frame by frame, but with MoCap technique, we can not only have more control points, but also the actions will be more natural and controllable. I was surprised how accurate and instant the motion was captured, even some objects are blocked by others (according to my eyes), but they are still \"visible\" by the cameras and the computer. Avatar used a lot of motion capture techniques in it's filmmaking. What impressed me in some news when it was shown in the theater is, they used something I would simply call \"dots\" (I don't know the actual name) as markers on the actors' face to map to the moving point of the model. This then reminds me of motion tracking. I think they are somewhat overlapped. I'm also into special effects so I tried motion tracking (as a simpler version of mocap) in Blender on my computer. At first I planned to make a laser between my fingers while due to the white background it turned out to be something strange.\n\n![finger laser](/images/finger_laser.gif)\n![finger original](/images/finger_original.png)\n","source":"_posts/Get-to-know-MoCap.md","raw":"---\ntitle: Get to know MoCap\ndate: 2017-02-03 12:56:21\ntags: [15664]\n---\nIn this week, we went to the MoCap Lab, which is full of fancy tools for motion capture. MoCap is a great idea that makes animation, filmmaking and video games much easier and better. Usually, traditional 3D animation has to be manually made frame by frame, but with MoCap technique, we can not only have more control points, but also the actions will be more natural and controllable. I was surprised how accurate and instant the motion was captured, even some objects are blocked by others (according to my eyes), but they are still \"visible\" by the cameras and the computer. Avatar used a lot of motion capture techniques in it's filmmaking. What impressed me in some news when it was shown in the theater is, they used something I would simply call \"dots\" (I don't know the actual name) as markers on the actors' face to map to the moving point of the model. This then reminds me of motion tracking. I think they are somewhat overlapped. I'm also into special effects so I tried motion tracking (as a simpler version of mocap) in Blender on my computer. At first I planned to make a laser between my fingers while due to the white background it turned out to be something strange.\n\n![finger laser](/images/finger_laser.gif)\n![finger original](/images/finger_original.png)\n","slug":"Get-to-know-MoCap","published":1,"updated":"2021-01-20T21:23:57.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt77000e1zjx01bqj9zf","content":"<p>In this week, we went to the MoCap Lab, which is full of fancy tools for motion capture. MoCap is a great idea that makes animation, filmmaking and video games much easier and better. Usually, traditional 3D animation has to be manually made frame by frame, but with MoCap technique, we can not only have more control points, but also the actions will be more natural and controllable. I was surprised how accurate and instant the motion was captured, even some objects are blocked by others (according to my eyes), but they are still “visible” by the cameras and the computer. Avatar used a lot of motion capture techniques in it’s filmmaking. What impressed me in some news when it was shown in the theater is, they used something I would simply call “dots” (I don’t know the actual name) as markers on the actors’ face to map to the moving point of the model. This then reminds me of motion tracking. I think they are somewhat overlapped. I’m also into special effects so I tried motion tracking (as a simpler version of mocap) in Blender on my computer. At first I planned to make a laser between my fingers while due to the white background it turned out to be something strange.</p>\n<p><img src=\"/images/finger_laser.gif\" alt=\"finger laser\"><br><img src=\"/images/finger_original.png\" alt=\"finger original\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this week, we went to the MoCap Lab, which is full of fancy tools for motion capture. MoCap is a great idea that makes animation, filmmaking and video games much easier and better. Usually, traditional 3D animation has to be manually made frame by frame, but with MoCap technique, we can not only have more control points, but also the actions will be more natural and controllable. I was surprised how accurate and instant the motion was captured, even some objects are blocked by others (according to my eyes), but they are still “visible” by the cameras and the computer. Avatar used a lot of motion capture techniques in it’s filmmaking. What impressed me in some news when it was shown in the theater is, they used something I would simply call “dots” (I don’t know the actual name) as markers on the actors’ face to map to the moving point of the model. This then reminds me of motion tracking. I think they are somewhat overlapped. I’m also into special effects so I tried motion tracking (as a simpler version of mocap) in Blender on my computer. At first I planned to make a laser between my fingers while due to the white background it turned out to be something strange.</p>\n<p><img src=\"/images/finger_laser.gif\" alt=\"finger laser\"><br><img src=\"/images/finger_original.png\" alt=\"finger original\"></p>\n"},{"title":"Hello Technical Animation","date":"2017-01-27T01:38:14.000Z","_content":"After taking 15-662 Computer Graphics course last spring, I decided to pursue deeper understanding in some specific area, so here I am, 15-664 Technical Animation, with our cute professor Nancy Pollard again.\n\nIn the first class we got a basic idea about the class, which covers most of my interest and curiosity. \"After this semester, everyone can create their own fluid simulation from scratch.\" said Prof.Pollard. I tried writing SPH in JavaScript and WebGL in the last assignment of Computer Science, it turned out to be a simple 2D simulation system with some adjustable attributes such as density, volume and viscosity, however with many limitations where I hadn't explored more due to the time limit. Along with the FLIP simulation method and it's advanced version called NB-FLIP I studied during my summer internship in the Oriental Dreamworks, I wish I can reach a higher level in understanding fluid simulation after taking this class.\n\nIn the second class, Prof.Pollard introduced some kinds of animation to us. Something impressed me is the crowd simulation in World War Z, which I watched in my undergraduate. At that time I was barely familiar with techniques used in animation, so I would honestly say I didn't realize the crowd of zombies were simulated with CG until the class.. It was so real that I was wondering how people could star that scene.. Then we talked about stop motion animations, particularly Kubo and the Two Strings, which I like a lot. I've been admiring people involved in stop motion animation making, since it seems a lot of work and time consuming, especially in today with a bunch of \"tricks\" we can use in CG. Facts proved that their hard work paid off. Stop motion animations usually gives us a very different feeling than pure CG animations. I think the reasons are the natural lighting, real materials, high resolutions, no need for render farms and so on. They are also fun to watch, among which my favorite are *Wallace and Gromit*, *Marry and Max*, and a very old Chinese one called *Effendi*, very unique and impressive. Nowadays, stop motion animations can be very realistic and fancy, Kubo and the Two Strings is the very example. However, other than the hard work of five years, I really appreciate their work in combining stop motion with high techs. They used CG to create huge crowds, water and things are not easy to control in real life. Also they created a lot of new systems and machines to bring their great ideas to life. Stop motion animation never means traditional(outdated) animation.\n> “We’re not militant purists about it. We always think, ‘We know what imagery we want to capture and then we use the best method to get it.’ Our starting point is always going to be practical; it’s always going to be handmade because that’s the studio we are. But we would never say no to something because you can’t realize it practically. If we need CG to fix this…” - Chris Butler [*Why The Marriage Of Stop-Motion And CGI Is A Great Thing\"](http://www.cinemablend.com/new/ParaNorman-Directors-Explain-Why-Marriage-Stop-Motion-CGI-Great-Thing-32534.html)\n\n![*Effendi*, 1979, China](/images/Effendi.jpg)\n","source":"_posts/Hello-Technical-Animation.md","raw":"---\ntitle: Hello Technical Animation\ndate: 2017-01-26 17:38:14\ntags: [15664]\n---\nAfter taking 15-662 Computer Graphics course last spring, I decided to pursue deeper understanding in some specific area, so here I am, 15-664 Technical Animation, with our cute professor Nancy Pollard again.\n\nIn the first class we got a basic idea about the class, which covers most of my interest and curiosity. \"After this semester, everyone can create their own fluid simulation from scratch.\" said Prof.Pollard. I tried writing SPH in JavaScript and WebGL in the last assignment of Computer Science, it turned out to be a simple 2D simulation system with some adjustable attributes such as density, volume and viscosity, however with many limitations where I hadn't explored more due to the time limit. Along with the FLIP simulation method and it's advanced version called NB-FLIP I studied during my summer internship in the Oriental Dreamworks, I wish I can reach a higher level in understanding fluid simulation after taking this class.\n\nIn the second class, Prof.Pollard introduced some kinds of animation to us. Something impressed me is the crowd simulation in World War Z, which I watched in my undergraduate. At that time I was barely familiar with techniques used in animation, so I would honestly say I didn't realize the crowd of zombies were simulated with CG until the class.. It was so real that I was wondering how people could star that scene.. Then we talked about stop motion animations, particularly Kubo and the Two Strings, which I like a lot. I've been admiring people involved in stop motion animation making, since it seems a lot of work and time consuming, especially in today with a bunch of \"tricks\" we can use in CG. Facts proved that their hard work paid off. Stop motion animations usually gives us a very different feeling than pure CG animations. I think the reasons are the natural lighting, real materials, high resolutions, no need for render farms and so on. They are also fun to watch, among which my favorite are *Wallace and Gromit*, *Marry and Max*, and a very old Chinese one called *Effendi*, very unique and impressive. Nowadays, stop motion animations can be very realistic and fancy, Kubo and the Two Strings is the very example. However, other than the hard work of five years, I really appreciate their work in combining stop motion with high techs. They used CG to create huge crowds, water and things are not easy to control in real life. Also they created a lot of new systems and machines to bring their great ideas to life. Stop motion animation never means traditional(outdated) animation.\n> “We’re not militant purists about it. We always think, ‘We know what imagery we want to capture and then we use the best method to get it.’ Our starting point is always going to be practical; it’s always going to be handmade because that’s the studio we are. But we would never say no to something because you can’t realize it practically. If we need CG to fix this…” - Chris Butler [*Why The Marriage Of Stop-Motion And CGI Is A Great Thing\"](http://www.cinemablend.com/new/ParaNorman-Directors-Explain-Why-Marriage-Stop-Motion-CGI-Great-Thing-32534.html)\n\n![*Effendi*, 1979, China](/images/Effendi.jpg)\n","slug":"Hello-Technical-Animation","published":1,"updated":"2021-01-20T21:23:57.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt79000g1zjxbx0g0oid","content":"<p>After taking 15-662 Computer Graphics course last spring, I decided to pursue deeper understanding in some specific area, so here I am, 15-664 Technical Animation, with our cute professor Nancy Pollard again.</p>\n<p>In the first class we got a basic idea about the class, which covers most of my interest and curiosity. “After this semester, everyone can create their own fluid simulation from scratch.” said Prof.Pollard. I tried writing SPH in JavaScript and WebGL in the last assignment of Computer Science, it turned out to be a simple 2D simulation system with some adjustable attributes such as density, volume and viscosity, however with many limitations where I hadn’t explored more due to the time limit. Along with the FLIP simulation method and it’s advanced version called NB-FLIP I studied during my summer internship in the Oriental Dreamworks, I wish I can reach a higher level in understanding fluid simulation after taking this class.</p>\n<p>In the second class, Prof.Pollard introduced some kinds of animation to us. Something impressed me is the crowd simulation in World War Z, which I watched in my undergraduate. At that time I was barely familiar with techniques used in animation, so I would honestly say I didn’t realize the crowd of zombies were simulated with CG until the class.. It was so real that I was wondering how people could star that scene.. Then we talked about stop motion animations, particularly Kubo and the Two Strings, which I like a lot. I’ve been admiring people involved in stop motion animation making, since it seems a lot of work and time consuming, especially in today with a bunch of “tricks” we can use in CG. Facts proved that their hard work paid off. Stop motion animations usually gives us a very different feeling than pure CG animations. I think the reasons are the natural lighting, real materials, high resolutions, no need for render farms and so on. They are also fun to watch, among which my favorite are <em>Wallace and Gromit</em>, <em>Marry and Max</em>, and a very old Chinese one called <em>Effendi</em>, very unique and impressive. Nowadays, stop motion animations can be very realistic and fancy, Kubo and the Two Strings is the very example. However, other than the hard work of five years, I really appreciate their work in combining stop motion with high techs. They used CG to create huge crowds, water and things are not easy to control in real life. Also they created a lot of new systems and machines to bring their great ideas to life. Stop motion animation never means traditional(outdated) animation.</p>\n<blockquote>\n<p>“We’re not militant purists about it. We always think, ‘We know what imagery we want to capture and then we use the best method to get it.’ Our starting point is always going to be practical; it’s always going to be handmade because that’s the studio we are. But we would never say no to something because you can’t realize it practically. If we need CG to fix this…” - Chris Butler <a href=\"http://www.cinemablend.com/new/ParaNorman-Directors-Explain-Why-Marriage-Stop-Motion-CGI-Great-Thing-32534.html\" target=\"_blank\" rel=\"noopener\">*Why The Marriage Of Stop-Motion And CGI Is A Great Thing”</a></p>\n</blockquote>\n<p><img src=\"/images/Effendi.jpg\" alt=\"*Effendi*, 1979, China\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>After taking 15-662 Computer Graphics course last spring, I decided to pursue deeper understanding in some specific area, so here I am, 15-664 Technical Animation, with our cute professor Nancy Pollard again.</p>\n<p>In the first class we got a basic idea about the class, which covers most of my interest and curiosity. “After this semester, everyone can create their own fluid simulation from scratch.” said Prof.Pollard. I tried writing SPH in JavaScript and WebGL in the last assignment of Computer Science, it turned out to be a simple 2D simulation system with some adjustable attributes such as density, volume and viscosity, however with many limitations where I hadn’t explored more due to the time limit. Along with the FLIP simulation method and it’s advanced version called NB-FLIP I studied during my summer internship in the Oriental Dreamworks, I wish I can reach a higher level in understanding fluid simulation after taking this class.</p>\n<p>In the second class, Prof.Pollard introduced some kinds of animation to us. Something impressed me is the crowd simulation in World War Z, which I watched in my undergraduate. At that time I was barely familiar with techniques used in animation, so I would honestly say I didn’t realize the crowd of zombies were simulated with CG until the class.. It was so real that I was wondering how people could star that scene.. Then we talked about stop motion animations, particularly Kubo and the Two Strings, which I like a lot. I’ve been admiring people involved in stop motion animation making, since it seems a lot of work and time consuming, especially in today with a bunch of “tricks” we can use in CG. Facts proved that their hard work paid off. Stop motion animations usually gives us a very different feeling than pure CG animations. I think the reasons are the natural lighting, real materials, high resolutions, no need for render farms and so on. They are also fun to watch, among which my favorite are <em>Wallace and Gromit</em>, <em>Marry and Max</em>, and a very old Chinese one called <em>Effendi</em>, very unique and impressive. Nowadays, stop motion animations can be very realistic and fancy, Kubo and the Two Strings is the very example. However, other than the hard work of five years, I really appreciate their work in combining stop motion with high techs. They used CG to create huge crowds, water and things are not easy to control in real life. Also they created a lot of new systems and machines to bring their great ideas to life. Stop motion animation never means traditional(outdated) animation.</p>\n<blockquote>\n<p>“We’re not militant purists about it. We always think, ‘We know what imagery we want to capture and then we use the best method to get it.’ Our starting point is always going to be practical; it’s always going to be handmade because that’s the studio we are. But we would never say no to something because you can’t realize it practically. If we need CG to fix this…” - Chris Butler <a href=\"http://www.cinemablend.com/new/ParaNorman-Directors-Explain-Why-Marriage-Stop-Motion-CGI-Great-Thing-32534.html\" target=\"_blank\" rel=\"noopener\">*Why The Marriage Of Stop-Motion And CGI Is A Great Thing”</a></p>\n</blockquote>\n<p><img src=\"/images/Effendi.jpg\" alt=\"*Effendi*, 1979, China\"></p>\n"},{"title":"Honorific Verbs","date":"2021-01-20T21:33:37.000Z","_content":"\n# 敬语\n\n### 特殊动词\n\n| 字典形 | 敬语动词 | 敬语动词变形 |\n|------|------|-----|\n| いる・行く・来る | いらっしゃる　| いらっしゃ**います** |\n| 見る |　ご覧になる　| ご覧になります |\n| 言う | おっしゃる　| おっしゃ**います** |\n| する | なさる　| なさ**います**|\n| 食べる・飲む | 召し上がる　| 召し上がります |\n| くれる | くださる　| くださ**います** |\n| 寝る | お休みになる　| お休みにあります |\n| 〜ている | 〜ていらっしゃる　| 〜ていらっしゃ**います** |\n\n** 以上敬语动词虽以る结尾，但都是U动词（5段动词），所以正常变形为ります，其中5个变形为います的动词均为不规则变形。\n\n 例句\n > 1 先生は今日学校にいらっしゃいません。\n > 2 何を召し上がりますか。\n > 3 田中さんのお母さんがこの本をくださいました。\n > 4 先生は自分で料理なさるそうです。\n > 5 心配なさらないでください。\n > 6 先生はテレビをご覧になっています。\n\n### 普通动词\n```\nお　＋　动词词干 ＋　になる\n```\n例句\n> 1 先生はもうお帰りになります。\n> 2 この雑誌をお読みになったことがあるますか。\n> 3 どうぞお使いになってください。\n\n** ことがさります・ください・てもいい・てはいけない 等表达保持不变，仅变形修饰的动词即可。\n** ている比较特殊，特殊动词敬语优先，普通动词则应该使用ていらっしゃる。例如：1 ご覧になっています。 2 先生は電話で話していらっしゃいます。3 先生は疲れていらっしゃるみたいです。\n\n### 建议（礼貌命令）\n```\nお　＋ 动词词干　＋　ください\n```\n例句\n> 1 切符をお取りください。\n> 2 説明をお読みください。\n> 3 お召し上がりください。\n> 4 お休みください。\n\n##\n```\nご　＋　する类动词（去掉する）　＋　ください\n```\n例句\n> 1 ご注意ください。\n> 2 ご覧ください。\n\n### 感谢您做某事\n```\n动词て形　＋　くださってありがとうございました（くれてありがとう）\n```\n> 1 推薦状を買いてくださってあるがとうございました。（敬）\n> 2 手伝ってくれてありがとう。（平）\n\n### 开心某事发生/做了某事\n```\n动词て形　＋　よかった\n```\n例句\n> 1 日本語を勉強してよかったです。\n> 2 メアリーさんが元気になってよかったです。\n> 3 昨日のパーティーに行かなくてよかったです。\n\n","source":"_posts/Honorific-Verbs.md","raw":"---\ntitle: Honorific Verbs\ndate: 2021-01-20 13:33:37\ntags: [Japanese]\n---\n\n# 敬语\n\n### 特殊动词\n\n| 字典形 | 敬语动词 | 敬语动词变形 |\n|------|------|-----|\n| いる・行く・来る | いらっしゃる　| いらっしゃ**います** |\n| 見る |　ご覧になる　| ご覧になります |\n| 言う | おっしゃる　| おっしゃ**います** |\n| する | なさる　| なさ**います**|\n| 食べる・飲む | 召し上がる　| 召し上がります |\n| くれる | くださる　| くださ**います** |\n| 寝る | お休みになる　| お休みにあります |\n| 〜ている | 〜ていらっしゃる　| 〜ていらっしゃ**います** |\n\n** 以上敬语动词虽以る结尾，但都是U动词（5段动词），所以正常变形为ります，其中5个变形为います的动词均为不规则变形。\n\n 例句\n > 1 先生は今日学校にいらっしゃいません。\n > 2 何を召し上がりますか。\n > 3 田中さんのお母さんがこの本をくださいました。\n > 4 先生は自分で料理なさるそうです。\n > 5 心配なさらないでください。\n > 6 先生はテレビをご覧になっています。\n\n### 普通动词\n```\nお　＋　动词词干 ＋　になる\n```\n例句\n> 1 先生はもうお帰りになります。\n> 2 この雑誌をお読みになったことがあるますか。\n> 3 どうぞお使いになってください。\n\n** ことがさります・ください・てもいい・てはいけない 等表达保持不变，仅变形修饰的动词即可。\n** ている比较特殊，特殊动词敬语优先，普通动词则应该使用ていらっしゃる。例如：1 ご覧になっています。 2 先生は電話で話していらっしゃいます。3 先生は疲れていらっしゃるみたいです。\n\n### 建议（礼貌命令）\n```\nお　＋ 动词词干　＋　ください\n```\n例句\n> 1 切符をお取りください。\n> 2 説明をお読みください。\n> 3 お召し上がりください。\n> 4 お休みください。\n\n##\n```\nご　＋　する类动词（去掉する）　＋　ください\n```\n例句\n> 1 ご注意ください。\n> 2 ご覧ください。\n\n### 感谢您做某事\n```\n动词て形　＋　くださってありがとうございました（くれてありがとう）\n```\n> 1 推薦状を買いてくださってあるがとうございました。（敬）\n> 2 手伝ってくれてありがとう。（平）\n\n### 开心某事发生/做了某事\n```\n动词て形　＋　よかった\n```\n例句\n> 1 日本語を勉強してよかったです。\n> 2 メアリーさんが元気になってよかったです。\n> 3 昨日のパーティーに行かなくてよかったです。\n\n","slug":"Honorific-Verbs","published":1,"updated":"2021-01-20T21:47:31.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7a000j1zjxpx6fdra8","content":"<h1 id=\"敬语\"><a href=\"#敬语\" class=\"headerlink\" title=\"敬语\"></a>敬语</h1><h3 id=\"特殊动词\"><a href=\"#特殊动词\" class=\"headerlink\" title=\"特殊动词\"></a>特殊动词</h3><table>\n<thead>\n<tr>\n<th>字典形</th>\n<th>敬语动词</th>\n<th>敬语动词变形</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>いる・行く・来る</td>\n<td>いらっしゃる　</td>\n<td>いらっしゃ<strong>います</strong></td>\n</tr>\n<tr>\n<td>見る</td>\n<td>　ご覧になる　</td>\n<td>ご覧になります</td>\n</tr>\n<tr>\n<td>言う</td>\n<td>おっしゃる　</td>\n<td>おっしゃ<strong>います</strong></td>\n</tr>\n<tr>\n<td>する</td>\n<td>なさる　</td>\n<td>なさ<strong>います</strong></td>\n</tr>\n<tr>\n<td>食べる・飲む</td>\n<td>召し上がる　</td>\n<td>召し上がります</td>\n</tr>\n<tr>\n<td>くれる</td>\n<td>くださる　</td>\n<td>くださ<strong>います</strong></td>\n</tr>\n<tr>\n<td>寝る</td>\n<td>お休みになる　</td>\n<td>お休みにあります</td>\n</tr>\n<tr>\n<td>〜ている</td>\n<td>〜ていらっしゃる　</td>\n<td>〜ていらっしゃ<strong>います</strong></td>\n</tr>\n</tbody>\n</table>\n<p>** 以上敬语动词虽以る结尾，但都是U动词（5段动词），所以正常变形为ります，其中5个变形为います的动词均为不规则变形。</p>\n<p> 例句</p>\n<blockquote>\n<p>1 先生は今日学校にいらっしゃいません。<br>2 何を召し上がりますか。<br>3 田中さんのお母さんがこの本をくださいました。<br>4 先生は自分で料理なさるそうです。<br>5 心配なさらないでください。<br>6 先生はテレビをご覧になっています。</p>\n</blockquote>\n<h3 id=\"普通动词\"><a href=\"#普通动词\" class=\"headerlink\" title=\"普通动词\"></a>普通动词</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">お　＋　动词词干 ＋　になる</span><br></pre></td></tr></table></figure>\n<p>例句</p>\n<blockquote>\n<p>1 先生はもうお帰りになります。<br>2 この雑誌をお読みになったことがあるますか。<br>3 どうぞお使いになってください。</p>\n</blockquote>\n<p><strong> ことがさります・ください・てもいい・てはいけない 等表达保持不变，仅变形修饰的动词即可。\n</strong> ている比较特殊，特殊动词敬语优先，普通动词则应该使用ていらっしゃる。例如：1 ご覧になっています。 2 先生は電話で話していらっしゃいます。3 先生は疲れていらっしゃるみたいです。</p>\n<h3 id=\"建议（礼貌命令）\"><a href=\"#建议（礼貌命令）\" class=\"headerlink\" title=\"建议（礼貌命令）\"></a>建议（礼貌命令）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">お　＋ 动词词干　＋　ください</span><br></pre></td></tr></table></figure>\n<p>例句</p>\n<blockquote>\n<p>1 切符をお取りください。<br>2 説明をお読みください。<br>3 お召し上がりください。<br>4 お休みください。</p>\n</blockquote>\n<p>##<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ご　＋　する类动词（去掉する）　＋　ください</span><br></pre></td></tr></table></figure></p>\n<p>例句</p>\n<blockquote>\n<p>1 ご注意ください。<br>2 ご覧ください。</p>\n</blockquote>\n<h3 id=\"感谢您做某事\"><a href=\"#感谢您做某事\" class=\"headerlink\" title=\"感谢您做某事\"></a>感谢您做某事</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动词て形　＋　くださってありがとうございました（くれてありがとう）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1 推薦状を買いてくださってあるがとうございました。（敬）<br>2 手伝ってくれてありがとう。（平）</p>\n</blockquote>\n<h3 id=\"开心某事发生-做了某事\"><a href=\"#开心某事发生-做了某事\" class=\"headerlink\" title=\"开心某事发生/做了某事\"></a>开心某事发生/做了某事</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动词て形　＋　よかった</span><br></pre></td></tr></table></figure>\n<p>例句</p>\n<blockquote>\n<p>1 日本語を勉強してよかったです。<br>2 メアリーさんが元気になってよかったです。<br>3 昨日のパーティーに行かなくてよかったです。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"敬语\"><a href=\"#敬语\" class=\"headerlink\" title=\"敬语\"></a>敬语</h1><h3 id=\"特殊动词\"><a href=\"#特殊动词\" class=\"headerlink\" title=\"特殊动词\"></a>特殊动词</h3><table>\n<thead>\n<tr>\n<th>字典形</th>\n<th>敬语动词</th>\n<th>敬语动词变形</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>いる・行く・来る</td>\n<td>いらっしゃる　</td>\n<td>いらっしゃ<strong>います</strong></td>\n</tr>\n<tr>\n<td>見る</td>\n<td>　ご覧になる　</td>\n<td>ご覧になります</td>\n</tr>\n<tr>\n<td>言う</td>\n<td>おっしゃる　</td>\n<td>おっしゃ<strong>います</strong></td>\n</tr>\n<tr>\n<td>する</td>\n<td>なさる　</td>\n<td>なさ<strong>います</strong></td>\n</tr>\n<tr>\n<td>食べる・飲む</td>\n<td>召し上がる　</td>\n<td>召し上がります</td>\n</tr>\n<tr>\n<td>くれる</td>\n<td>くださる　</td>\n<td>くださ<strong>います</strong></td>\n</tr>\n<tr>\n<td>寝る</td>\n<td>お休みになる　</td>\n<td>お休みにあります</td>\n</tr>\n<tr>\n<td>〜ている</td>\n<td>〜ていらっしゃる　</td>\n<td>〜ていらっしゃ<strong>います</strong></td>\n</tr>\n</tbody>\n</table>\n<p>** 以上敬语动词虽以る结尾，但都是U动词（5段动词），所以正常变形为ります，其中5个变形为います的动词均为不规则变形。</p>\n<p> 例句</p>\n<blockquote>\n<p>1 先生は今日学校にいらっしゃいません。<br>2 何を召し上がりますか。<br>3 田中さんのお母さんがこの本をくださいました。<br>4 先生は自分で料理なさるそうです。<br>5 心配なさらないでください。<br>6 先生はテレビをご覧になっています。</p>\n</blockquote>\n<h3 id=\"普通动词\"><a href=\"#普通动词\" class=\"headerlink\" title=\"普通动词\"></a>普通动词</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">お　＋　动词词干 ＋　になる</span><br></pre></td></tr></table></figure>\n<p>例句</p>\n<blockquote>\n<p>1 先生はもうお帰りになります。<br>2 この雑誌をお読みになったことがあるますか。<br>3 どうぞお使いになってください。</p>\n</blockquote>\n<p><strong> ことがさります・ください・てもいい・てはいけない 等表达保持不变，仅变形修饰的动词即可。\n</strong> ている比较特殊，特殊动词敬语优先，普通动词则应该使用ていらっしゃる。例如：1 ご覧になっています。 2 先生は電話で話していらっしゃいます。3 先生は疲れていらっしゃるみたいです。</p>\n<h3 id=\"建议（礼貌命令）\"><a href=\"#建议（礼貌命令）\" class=\"headerlink\" title=\"建议（礼貌命令）\"></a>建议（礼貌命令）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">お　＋ 动词词干　＋　ください</span><br></pre></td></tr></table></figure>\n<p>例句</p>\n<blockquote>\n<p>1 切符をお取りください。<br>2 説明をお読みください。<br>3 お召し上がりください。<br>4 お休みください。</p>\n</blockquote>\n<p>##<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ご　＋　する类动词（去掉する）　＋　ください</span><br></pre></td></tr></table></figure></p>\n<p>例句</p>\n<blockquote>\n<p>1 ご注意ください。<br>2 ご覧ください。</p>\n</blockquote>\n<h3 id=\"感谢您做某事\"><a href=\"#感谢您做某事\" class=\"headerlink\" title=\"感谢您做某事\"></a>感谢您做某事</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动词て形　＋　くださってありがとうございました（くれてありがとう）</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1 推薦状を買いてくださってあるがとうございました。（敬）<br>2 手伝ってくれてありがとう。（平）</p>\n</blockquote>\n<h3 id=\"开心某事发生-做了某事\"><a href=\"#开心某事发生-做了某事\" class=\"headerlink\" title=\"开心某事发生/做了某事\"></a>开心某事发生/做了某事</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动词て形　＋　よかった</span><br></pre></td></tr></table></figure>\n<p>例句</p>\n<blockquote>\n<p>1 日本語を勉強してよかったです。<br>2 メアリーさんが元気になってよかったです。<br>3 昨日のパーティーに行かなくてよかったです。</p>\n</blockquote>\n"},{"title":"Mini Project 1","date":"2017-02-20T09:16:21.000Z","_content":"In the Mini-Project 1, I implemented two of the options, one is CCD IK and the other is Keyframing.\n\n*CCD IK*\nplatform: Unity 3D\ndeliverable: CCD/CCD.app\nuploaded files: CCD/UnityFiles.tar CCD/CCD.app\ndescription: This app allows us to simulation CCD IK. In this program, we can choose to generate 1 - 90 joints randomly rotated and scaled by using the slider to the top slider. Also, we can choose the iteration counts by changing the value of the slider below. By hitting create button, a set of joints will appear. By holding key \"A,S,D,Q,W,E\" on the keyboard, you can move the IK handle to the left, down, right, forward, up, backward. By holding key \"J,K,L,U,I,O\", you can move the camera view in the same way. By hitting one of those joints on the screen, we can set the end effector to any of them. \nprocess:\n![create 5 joints](/images/ccd1.png)\n![if the target can't be reached](/images/ccd2.png)\n![select the end effector](/images/ccd3.png)\n![change the camera view](/images/ccd4.png)\n\n*Keyframing*\nplatform: Blender\ndeliverable: Keyframing/squash.blend videos to be uploaded still rendering..\ndescription: This is the first model I've ever done the modeling, texturing, rigging, animating and rendering all by myself. I implemented two walk cycles, one is the normal one, the other angry.\n![](/images/render3.png)\n![](/images/render4.png)\nimplementation:\nFor the rigging part, I followed a standard rigging style for a bipedal character. And then created two knee pole targets, to make sure that the knees of my character are facing forward all the time. Two feet controllers were added to make it convenient to animate the step motion. And I also added two heel IK handlers to make the rotation of the feet more natural.\n![rigging](/images/rig.png)\n![controllers](/images/handle.png)\nThen I followed the [Animators_Survival_Kit](http://graphics.cs.cmu.edu/nsp/course/15464-s17/lectures/Animators_Survival_Kit_walks.pdf) to make the walking cycle, which turned out to be not bad, (satisfied me at least XD ). Then the angry walking cycle, since the motion is a bit exaggerated, end up being a little bumpy. Funny.\n{% vimeo 204888847%}\n{% vimeo 204913396%}\n","source":"_posts/Mini-Project-1.md","raw":"---\ntitle: Mini Project 1\ndate: 2017-02-20 01:16:21\ntags: [15664]\n---\nIn the Mini-Project 1, I implemented two of the options, one is CCD IK and the other is Keyframing.\n\n*CCD IK*\nplatform: Unity 3D\ndeliverable: CCD/CCD.app\nuploaded files: CCD/UnityFiles.tar CCD/CCD.app\ndescription: This app allows us to simulation CCD IK. In this program, we can choose to generate 1 - 90 joints randomly rotated and scaled by using the slider to the top slider. Also, we can choose the iteration counts by changing the value of the slider below. By hitting create button, a set of joints will appear. By holding key \"A,S,D,Q,W,E\" on the keyboard, you can move the IK handle to the left, down, right, forward, up, backward. By holding key \"J,K,L,U,I,O\", you can move the camera view in the same way. By hitting one of those joints on the screen, we can set the end effector to any of them. \nprocess:\n![create 5 joints](/images/ccd1.png)\n![if the target can't be reached](/images/ccd2.png)\n![select the end effector](/images/ccd3.png)\n![change the camera view](/images/ccd4.png)\n\n*Keyframing*\nplatform: Blender\ndeliverable: Keyframing/squash.blend videos to be uploaded still rendering..\ndescription: This is the first model I've ever done the modeling, texturing, rigging, animating and rendering all by myself. I implemented two walk cycles, one is the normal one, the other angry.\n![](/images/render3.png)\n![](/images/render4.png)\nimplementation:\nFor the rigging part, I followed a standard rigging style for a bipedal character. And then created two knee pole targets, to make sure that the knees of my character are facing forward all the time. Two feet controllers were added to make it convenient to animate the step motion. And I also added two heel IK handlers to make the rotation of the feet more natural.\n![rigging](/images/rig.png)\n![controllers](/images/handle.png)\nThen I followed the [Animators_Survival_Kit](http://graphics.cs.cmu.edu/nsp/course/15464-s17/lectures/Animators_Survival_Kit_walks.pdf) to make the walking cycle, which turned out to be not bad, (satisfied me at least XD ). Then the angry walking cycle, since the motion is a bit exaggerated, end up being a little bumpy. Funny.\n{% vimeo 204888847%}\n{% vimeo 204913396%}\n","slug":"Mini-Project-1","published":1,"updated":"2021-01-20T21:23:57.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7c000l1zjx4t5nehyz","content":"<p>In the Mini-Project 1, I implemented two of the options, one is CCD IK and the other is Keyframing.</p>\n<p><em>CCD IK</em><br>platform: Unity 3D<br>deliverable: CCD/CCD.app<br>uploaded files: CCD/UnityFiles.tar CCD/CCD.app<br>description: This app allows us to simulation CCD IK. In this program, we can choose to generate 1 - 90 joints randomly rotated and scaled by using the slider to the top slider. Also, we can choose the iteration counts by changing the value of the slider below. By hitting create button, a set of joints will appear. By holding key “A,S,D,Q,W,E” on the keyboard, you can move the IK handle to the left, down, right, forward, up, backward. By holding key “J,K,L,U,I,O”, you can move the camera view in the same way. By hitting one of those joints on the screen, we can set the end effector to any of them.<br>process:<br><img src=\"/images/ccd1.png\" alt=\"create 5 joints\"><br><img src=\"/images/ccd2.png\" alt=\"if the target can&#39;t be reached\"><br><img src=\"/images/ccd3.png\" alt=\"select the end effector\"><br><img src=\"/images/ccd4.png\" alt=\"change the camera view\"></p>\n<p><em>Keyframing</em><br>platform: Blender<br>deliverable: Keyframing/squash.blend videos to be uploaded still rendering..<br>description: This is the first model I’ve ever done the modeling, texturing, rigging, animating and rendering all by myself. I implemented two walk cycles, one is the normal one, the other angry.<br><img src=\"/images/render3.png\" alt><br><img src=\"/images/render4.png\" alt><br>implementation:<br>For the rigging part, I followed a standard rigging style for a bipedal character. And then created two knee pole targets, to make sure that the knees of my character are facing forward all the time. Two feet controllers were added to make it convenient to animate the step motion. And I also added two heel IK handlers to make the rotation of the feet more natural.<br><img src=\"/images/rig.png\" alt=\"rigging\"><br><img src=\"/images/handle.png\" alt=\"controllers\"><br>Then I followed the <a href=\"http://graphics.cs.cmu.edu/nsp/course/15464-s17/lectures/Animators_Survival_Kit_walks.pdf\" target=\"_blank\" rel=\"noopener\">Animators_Survival_Kit</a> to make the walking cycle, which turned out to be not bad, (satisfied me at least XD ). Then the angry walking cycle, since the motion is a bit exaggerated, end up being a little bumpy. Funny.<br><div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/204888847\" frameborder=\"0\" allowfullscreen></iframe></div><br><div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/204913396\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n","site":{"data":{}},"excerpt":"","more":"<p>In the Mini-Project 1, I implemented two of the options, one is CCD IK and the other is Keyframing.</p>\n<p><em>CCD IK</em><br>platform: Unity 3D<br>deliverable: CCD/CCD.app<br>uploaded files: CCD/UnityFiles.tar CCD/CCD.app<br>description: This app allows us to simulation CCD IK. In this program, we can choose to generate 1 - 90 joints randomly rotated and scaled by using the slider to the top slider. Also, we can choose the iteration counts by changing the value of the slider below. By hitting create button, a set of joints will appear. By holding key “A,S,D,Q,W,E” on the keyboard, you can move the IK handle to the left, down, right, forward, up, backward. By holding key “J,K,L,U,I,O”, you can move the camera view in the same way. By hitting one of those joints on the screen, we can set the end effector to any of them.<br>process:<br><img src=\"/images/ccd1.png\" alt=\"create 5 joints\"><br><img src=\"/images/ccd2.png\" alt=\"if the target can&#39;t be reached\"><br><img src=\"/images/ccd3.png\" alt=\"select the end effector\"><br><img src=\"/images/ccd4.png\" alt=\"change the camera view\"></p>\n<p><em>Keyframing</em><br>platform: Blender<br>deliverable: Keyframing/squash.blend videos to be uploaded still rendering..<br>description: This is the first model I’ve ever done the modeling, texturing, rigging, animating and rendering all by myself. I implemented two walk cycles, one is the normal one, the other angry.<br><img src=\"/images/render3.png\" alt><br><img src=\"/images/render4.png\" alt><br>implementation:<br>For the rigging part, I followed a standard rigging style for a bipedal character. And then created two knee pole targets, to make sure that the knees of my character are facing forward all the time. Two feet controllers were added to make it convenient to animate the step motion. And I also added two heel IK handlers to make the rotation of the feet more natural.<br><img src=\"/images/rig.png\" alt=\"rigging\"><br><img src=\"/images/handle.png\" alt=\"controllers\"><br>Then I followed the <a href=\"http://graphics.cs.cmu.edu/nsp/course/15464-s17/lectures/Animators_Survival_Kit_walks.pdf\" target=\"_blank\" rel=\"noopener\">Animators_Survival_Kit</a> to make the walking cycle, which turned out to be not bad, (satisfied me at least XD ). Then the angry walking cycle, since the motion is a bit exaggerated, end up being a little bumpy. Funny.<br><div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/204888847\" frameborder=\"0\" allowfullscreen></iframe></div><br><div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/204913396\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n"},{"title":"Mini Project 2","date":"2017-03-20T05:33:40.000Z","_content":"# Cloth simulation\n\nCloth simulation with mass spring method and constraint based method in C++ and OpenGL.\n\n{% vimeo 209126665 %}\n\n### Features\n\n  - Simulating method can be choosen from [**mass spring**](http://creativecoding.evl.uic.edu/courses/cs488/finalprojects/cloth/cloth.pdf) and [**constraint based**](http://www.cs.cmu.edu/~ytoh/stickyfingers.pdf)\n  - Object collision\n  - Wind\n  - Stiffness increase / decrease\n  - Tearable\n  - View / Shading mode options\n\n### How to use\nIn terminal, under current folder\n```sh\n$ make\n$ ./main -r 30 -c 30 -m 0 -p 0\n```\nTo run with different parameters\n\n| Opt | Meaning | Value |\n| ------ | ------ | ------ |\n| -r  | grid row count | [3, 30] |\n| -c | grid column count | [3, 30] |\n| -m | mode | 0 ( mass spring ), 1 ( constraint based ) |\n| -p | pin 2 or 4 points | 0(2), 1(4) |\n\nIn the window, to change the view or interact with the cloth\n\n| Key | Meaning  |\n| ------ | ------ |\n| W/A/S/D  | Move the view |\n| mouse scrolling | Scale the view |\n| R | Reset to default view |\n| T | Change to side view |\n| E (hold) + mouse | Rotate the view |\n| Z | Turn on/off the wind|\n| X/C | Increase/Decrease spring stiffness |\n| Y | Toggle wireframe/shaded mode |\n| I/J/K/L/U/O | Move the ball |\n| [ | Decrease the ball radius |\n| ] | Increase the ball radius |\n\n","source":"_posts/Mini-Project-2.md","raw":"---\ntitle: Mini Project 2\ndate: 2017-03-19 22:33:40\ntags: [15664]\n---\n# Cloth simulation\n\nCloth simulation with mass spring method and constraint based method in C++ and OpenGL.\n\n{% vimeo 209126665 %}\n\n### Features\n\n  - Simulating method can be choosen from [**mass spring**](http://creativecoding.evl.uic.edu/courses/cs488/finalprojects/cloth/cloth.pdf) and [**constraint based**](http://www.cs.cmu.edu/~ytoh/stickyfingers.pdf)\n  - Object collision\n  - Wind\n  - Stiffness increase / decrease\n  - Tearable\n  - View / Shading mode options\n\n### How to use\nIn terminal, under current folder\n```sh\n$ make\n$ ./main -r 30 -c 30 -m 0 -p 0\n```\nTo run with different parameters\n\n| Opt | Meaning | Value |\n| ------ | ------ | ------ |\n| -r  | grid row count | [3, 30] |\n| -c | grid column count | [3, 30] |\n| -m | mode | 0 ( mass spring ), 1 ( constraint based ) |\n| -p | pin 2 or 4 points | 0(2), 1(4) |\n\nIn the window, to change the view or interact with the cloth\n\n| Key | Meaning  |\n| ------ | ------ |\n| W/A/S/D  | Move the view |\n| mouse scrolling | Scale the view |\n| R | Reset to default view |\n| T | Change to side view |\n| E (hold) + mouse | Rotate the view |\n| Z | Turn on/off the wind|\n| X/C | Increase/Decrease spring stiffness |\n| Y | Toggle wireframe/shaded mode |\n| I/J/K/L/U/O | Move the ball |\n| [ | Decrease the ball radius |\n| ] | Increase the ball radius |\n\n","slug":"Mini-Project-2","published":1,"updated":"2021-01-20T21:23:57.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7d000n1zjx0jniq5uf","content":"<h1 id=\"Cloth-simulation\"><a href=\"#Cloth-simulation\" class=\"headerlink\" title=\"Cloth simulation\"></a>Cloth simulation</h1><p>Cloth simulation with mass spring method and constraint based method in C++ and OpenGL.</p>\n<div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/209126665\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h3><ul>\n<li>Simulating method can be choosen from <a href=\"http://creativecoding.evl.uic.edu/courses/cs488/finalprojects/cloth/cloth.pdf\" target=\"_blank\" rel=\"noopener\"><strong>mass spring</strong></a> and <a href=\"http://www.cs.cmu.edu/~ytoh/stickyfingers.pdf\" target=\"_blank\" rel=\"noopener\"><strong>constraint based</strong></a></li>\n<li>Object collision</li>\n<li>Wind</li>\n<li>Stiffness increase / decrease</li>\n<li>Tearable</li>\n<li>View / Shading mode options</li>\n</ul>\n<h3 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h3><p>In terminal, under current folder<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br><span class=\"line\">$ ./main -r 30 -c 30 -m 0 -p 0</span><br></pre></td></tr></table></figure></p>\n<p>To run with different parameters</p>\n<table>\n<thead>\n<tr>\n<th>Opt</th>\n<th>Meaning</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-r</td>\n<td>grid row count</td>\n<td>[3, 30]</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>grid column count</td>\n<td>[3, 30]</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>mode</td>\n<td>0 ( mass spring ), 1 ( constraint based )</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>pin 2 or 4 points</td>\n<td>0(2), 1(4)</td>\n</tr>\n</tbody>\n</table>\n<p>In the window, to change the view or interact with the cloth</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>W/A/S/D</td>\n<td>Move the view</td>\n</tr>\n<tr>\n<td>mouse scrolling</td>\n<td>Scale the view</td>\n</tr>\n<tr>\n<td>R</td>\n<td>Reset to default view</td>\n</tr>\n<tr>\n<td>T</td>\n<td>Change to side view</td>\n</tr>\n<tr>\n<td>E (hold) + mouse</td>\n<td>Rotate the view</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>Turn on/off the wind</td>\n</tr>\n<tr>\n<td>X/C</td>\n<td>Increase/Decrease spring stiffness</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>Toggle wireframe/shaded mode</td>\n</tr>\n<tr>\n<td>I/J/K/L/U/O</td>\n<td>Move the ball</td>\n</tr>\n<tr>\n<td>[</td>\n<td>Decrease the ball radius</td>\n</tr>\n<tr>\n<td>]</td>\n<td>Increase the ball radius</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Cloth-simulation\"><a href=\"#Cloth-simulation\" class=\"headerlink\" title=\"Cloth simulation\"></a>Cloth simulation</h1><p>Cloth simulation with mass spring method and constraint based method in C++ and OpenGL.</p>\n<div class=\"video-container\"><iframe src=\"//player.vimeo.com/video/209126665\" frameborder=\"0\" allowfullscreen></iframe></div>\n<h3 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h3><ul>\n<li>Simulating method can be choosen from <a href=\"http://creativecoding.evl.uic.edu/courses/cs488/finalprojects/cloth/cloth.pdf\" target=\"_blank\" rel=\"noopener\"><strong>mass spring</strong></a> and <a href=\"http://www.cs.cmu.edu/~ytoh/stickyfingers.pdf\" target=\"_blank\" rel=\"noopener\"><strong>constraint based</strong></a></li>\n<li>Object collision</li>\n<li>Wind</li>\n<li>Stiffness increase / decrease</li>\n<li>Tearable</li>\n<li>View / Shading mode options</li>\n</ul>\n<h3 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use\"></a>How to use</h3><p>In terminal, under current folder<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br><span class=\"line\">$ ./main -r 30 -c 30 -m 0 -p 0</span><br></pre></td></tr></table></figure></p>\n<p>To run with different parameters</p>\n<table>\n<thead>\n<tr>\n<th>Opt</th>\n<th>Meaning</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-r</td>\n<td>grid row count</td>\n<td>[3, 30]</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>grid column count</td>\n<td>[3, 30]</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>mode</td>\n<td>0 ( mass spring ), 1 ( constraint based )</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>pin 2 or 4 points</td>\n<td>0(2), 1(4)</td>\n</tr>\n</tbody>\n</table>\n<p>In the window, to change the view or interact with the cloth</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>W/A/S/D</td>\n<td>Move the view</td>\n</tr>\n<tr>\n<td>mouse scrolling</td>\n<td>Scale the view</td>\n</tr>\n<tr>\n<td>R</td>\n<td>Reset to default view</td>\n</tr>\n<tr>\n<td>T</td>\n<td>Change to side view</td>\n</tr>\n<tr>\n<td>E (hold) + mouse</td>\n<td>Rotate the view</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>Turn on/off the wind</td>\n</tr>\n<tr>\n<td>X/C</td>\n<td>Increase/Decrease spring stiffness</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>Toggle wireframe/shaded mode</td>\n</tr>\n<tr>\n<td>I/J/K/L/U/O</td>\n<td>Move the ball</td>\n</tr>\n<tr>\n<td>[</td>\n<td>Decrease the ball radius</td>\n</tr>\n<tr>\n<td>]</td>\n<td>Increase the ball radius</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Mini ray tracer more and some thoughts","date":"2020-07-19T03:58:39.000Z","_content":"\nOur mini ray tracer now has a ground and the material with refraction. I used the same refraction calculation approach as I tried in the Web tracer and it works here. Whereas, there appears to be some other small issue here, what are those black noises here?\n![current stage](/images/toycer/4.png)\n\nSome cartoon-like 'bug':\n![some cute 'bug'](/images/toycer/5.png)\n\nAs I think of the reason why the diffuse reflection didn't work here. I started to get the concept fo **Global Illumination** we used to learn in the graphics class. As illustrated in the Wikipedia:\n> Global illumination[1] (shortened as GI), or indirect illumination, is a group of algorithms used in 3D computer graphics that are meant to add more realistic lighting to 3D scenes. Such algorithms take into account not only the light that comes directly from a light source (direct illumination), but also subsequent cases in which light rays from the same source are reflected by other surfaces in the scene, whether reflective or not (indirect illumination).\n\nand\n> Images rendered using global illumination algorithms often appear more photorealistic than those using only direct illumination algorithms. However, such images are computationally more expensive and consequently much slower to generate.\n\n\n","source":"_posts/Mini-ray-tracer-more-and-some-thoughts.md","raw":"---\ntitle: Mini ray tracer more and some thoughts\ndate: 2020-07-18 20:58:39\ntags: cg\n---\n\nOur mini ray tracer now has a ground and the material with refraction. I used the same refraction calculation approach as I tried in the Web tracer and it works here. Whereas, there appears to be some other small issue here, what are those black noises here?\n![current stage](/images/toycer/4.png)\n\nSome cartoon-like 'bug':\n![some cute 'bug'](/images/toycer/5.png)\n\nAs I think of the reason why the diffuse reflection didn't work here. I started to get the concept fo **Global Illumination** we used to learn in the graphics class. As illustrated in the Wikipedia:\n> Global illumination[1] (shortened as GI), or indirect illumination, is a group of algorithms used in 3D computer graphics that are meant to add more realistic lighting to 3D scenes. Such algorithms take into account not only the light that comes directly from a light source (direct illumination), but also subsequent cases in which light rays from the same source are reflected by other surfaces in the scene, whether reflective or not (indirect illumination).\n\nand\n> Images rendered using global illumination algorithms often appear more photorealistic than those using only direct illumination algorithms. However, such images are computationally more expensive and consequently much slower to generate.\n\n\n","slug":"Mini-ray-tracer-more-and-some-thoughts","published":1,"updated":"2021-01-20T21:23:57.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7e000p1zjxfawr5gc0","content":"<p>Our mini ray tracer now has a ground and the material with refraction. I used the same refraction calculation approach as I tried in the Web tracer and it works here. Whereas, there appears to be some other small issue here, what are those black noises here?<br><img src=\"/images/toycer/4.png\" alt=\"current stage\"></p>\n<p>Some cartoon-like ‘bug’:<br><img src=\"/images/toycer/5.png\" alt=\"some cute &#39;bug&#39;\"></p>\n<p>As I think of the reason why the diffuse reflection didn’t work here. I started to get the concept fo <strong>Global Illumination</strong> we used to learn in the graphics class. As illustrated in the Wikipedia:</p>\n<blockquote>\n<p>Global illumination[1] (shortened as GI), or indirect illumination, is a group of algorithms used in 3D computer graphics that are meant to add more realistic lighting to 3D scenes. Such algorithms take into account not only the light that comes directly from a light source (direct illumination), but also subsequent cases in which light rays from the same source are reflected by other surfaces in the scene, whether reflective or not (indirect illumination).</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>Images rendered using global illumination algorithms often appear more photorealistic than those using only direct illumination algorithms. However, such images are computationally more expensive and consequently much slower to generate.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>Our mini ray tracer now has a ground and the material with refraction. I used the same refraction calculation approach as I tried in the Web tracer and it works here. Whereas, there appears to be some other small issue here, what are those black noises here?<br><img src=\"/images/toycer/4.png\" alt=\"current stage\"></p>\n<p>Some cartoon-like ‘bug’:<br><img src=\"/images/toycer/5.png\" alt=\"some cute &#39;bug&#39;\"></p>\n<p>As I think of the reason why the diffuse reflection didn’t work here. I started to get the concept fo <strong>Global Illumination</strong> we used to learn in the graphics class. As illustrated in the Wikipedia:</p>\n<blockquote>\n<p>Global illumination[1] (shortened as GI), or indirect illumination, is a group of algorithms used in 3D computer graphics that are meant to add more realistic lighting to 3D scenes. Such algorithms take into account not only the light that comes directly from a light source (direct illumination), but also subsequent cases in which light rays from the same source are reflected by other surfaces in the scene, whether reflective or not (indirect illumination).</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>Images rendered using global illumination algorithms often appear more photorealistic than those using only direct illumination algorithms. However, such images are computationally more expensive and consequently much slower to generate.</p>\n</blockquote>\n"},{"title":"Mini ray tracer progress","date":"2020-07-13T21:23:30.000Z","_content":"\nEven though I thought I was not going to modify my ray tracer in WebGL any more, but with passion out of no where, I added camera rotation and tried to clean up a bit. There now is a working version which I was pretty happy with. Also added triangles, cubes and planes.\n![wip1](/images/toycer/21.gif)\n\nThen I started working on refraction, some buggies showed up again. After trying two nights, I started wondering if those issues are from my code (of course). But I decided to keep up with my ShaderToy tracer to switch my mood. \nFirst step I added some lights and created two spheres.\n![wip2](/images/toycer/2.png)\n\nThen I started kinda 'copying' my code from WebGL tracer. After adding diffuse material by using reflected rays, the shading looks correct but the sampling looks weird. Then I read the book, just to find the shading can be simply combined with Amibient + Diffuse + Specular. I'm not sure about the relationship between the Lambertian modal and the way where we actually shoot rays bounced by the sphere. That is my confusion now.\n![wip3](/images/toycer/3.png)\n\n","source":"_posts/Mini-ray-tracer-progress.md","raw":"---\ntitle: Mini ray tracer progress\ndate: 2020-07-13 14:23:30\ntags: cg\n---\n\nEven though I thought I was not going to modify my ray tracer in WebGL any more, but with passion out of no where, I added camera rotation and tried to clean up a bit. There now is a working version which I was pretty happy with. Also added triangles, cubes and planes.\n![wip1](/images/toycer/21.gif)\n\nThen I started working on refraction, some buggies showed up again. After trying two nights, I started wondering if those issues are from my code (of course). But I decided to keep up with my ShaderToy tracer to switch my mood. \nFirst step I added some lights and created two spheres.\n![wip2](/images/toycer/2.png)\n\nThen I started kinda 'copying' my code from WebGL tracer. After adding diffuse material by using reflected rays, the shading looks correct but the sampling looks weird. Then I read the book, just to find the shading can be simply combined with Amibient + Diffuse + Specular. I'm not sure about the relationship between the Lambertian modal and the way where we actually shoot rays bounced by the sphere. That is my confusion now.\n![wip3](/images/toycer/3.png)\n\n","slug":"Mini-ray-tracer-progress","published":1,"updated":"2021-01-20T21:23:57.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7f000r1zjxfhg4m0b5","content":"<p>Even though I thought I was not going to modify my ray tracer in WebGL any more, but with passion out of no where, I added camera rotation and tried to clean up a bit. There now is a working version which I was pretty happy with. Also added triangles, cubes and planes.<br><img src=\"/images/toycer/21.gif\" alt=\"wip1\"></p>\n<p>Then I started working on refraction, some buggies showed up again. After trying two nights, I started wondering if those issues are from my code (of course). But I decided to keep up with my ShaderToy tracer to switch my mood.<br>First step I added some lights and created two spheres.<br><img src=\"/images/toycer/2.png\" alt=\"wip2\"></p>\n<p>Then I started kinda ‘copying’ my code from WebGL tracer. After adding diffuse material by using reflected rays, the shading looks correct but the sampling looks weird. Then I read the book, just to find the shading can be simply combined with Amibient + Diffuse + Specular. I’m not sure about the relationship between the Lambertian modal and the way where we actually shoot rays bounced by the sphere. That is my confusion now.<br><img src=\"/images/toycer/3.png\" alt=\"wip3\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Even though I thought I was not going to modify my ray tracer in WebGL any more, but with passion out of no where, I added camera rotation and tried to clean up a bit. There now is a working version which I was pretty happy with. Also added triangles, cubes and planes.<br><img src=\"/images/toycer/21.gif\" alt=\"wip1\"></p>\n<p>Then I started working on refraction, some buggies showed up again. After trying two nights, I started wondering if those issues are from my code (of course). But I decided to keep up with my ShaderToy tracer to switch my mood.<br>First step I added some lights and created two spheres.<br><img src=\"/images/toycer/2.png\" alt=\"wip2\"></p>\n<p>Then I started kinda ‘copying’ my code from WebGL tracer. After adding diffuse material by using reflected rays, the shading looks correct but the sampling looks weird. Then I read the book, just to find the shading can be simply combined with Amibient + Diffuse + Specular. I’m not sure about the relationship between the Lambertian modal and the way where we actually shoot rays bounced by the sphere. That is my confusion now.<br><img src=\"/images/toycer/3.png\" alt=\"wip3\"></p>\n"},{"title":"Put on the headset","date":"2017-04-19T08:25:34.000Z","_content":"Virtual Reality is a hit today in a variety kinds of industries. Not only animations, games and movies, but also education, even medicine start to make the best of the features of it. VR is not anything I could imagine 5 years ago, however it influences our life much now. As a student majoring in Entertainment Technology, I am lucky enough to have more opportunities to give a touch on VR technology.\nRecall my first attempt on VR, like 4 years ago. I participated in a competition with some VR enthusiast and made a very simple version of portable VR headset, which, I would rather say, is very similar to the Google cardboard. While because people rarely saw VR in real life at that time, not to mention wearing a headset and feeling it, we turned out to get the 3rd place award. I realized then how VR is able to charm people, (who are tired of the real life, maybe not :)).\nThrough these semesters, having made, playtested and tried out many VR games, I found out that I am a person who would easily get absorbed in the VR world, (perhaps) same with our professor Pollard, which, I don't think it's a bad thing at all. Because I can go through different experience without stepping out of the buildings. I would feel losing balance standing on a thin wood in the air, cry out when a dinosaur is reaching me and dodge aside if something is hitting me. My friend is totally the opposite to me, so she came up with an idea of creating a jumping experience. Then we spent like no more than 10 minutes to create a scene where we can be thrown from a high building. Then, a fit of dizziness came over me, I suppose, drugs are nothing more than this.","source":"_posts/Put-on-the-headset.md","raw":"---\ntitle: Put on the headset\ndate: 2017-04-19 01:25:34\ntags: [15664]\n---\nVirtual Reality is a hit today in a variety kinds of industries. Not only animations, games and movies, but also education, even medicine start to make the best of the features of it. VR is not anything I could imagine 5 years ago, however it influences our life much now. As a student majoring in Entertainment Technology, I am lucky enough to have more opportunities to give a touch on VR technology.\nRecall my first attempt on VR, like 4 years ago. I participated in a competition with some VR enthusiast and made a very simple version of portable VR headset, which, I would rather say, is very similar to the Google cardboard. While because people rarely saw VR in real life at that time, not to mention wearing a headset and feeling it, we turned out to get the 3rd place award. I realized then how VR is able to charm people, (who are tired of the real life, maybe not :)).\nThrough these semesters, having made, playtested and tried out many VR games, I found out that I am a person who would easily get absorbed in the VR world, (perhaps) same with our professor Pollard, which, I don't think it's a bad thing at all. Because I can go through different experience without stepping out of the buildings. I would feel losing balance standing on a thin wood in the air, cry out when a dinosaur is reaching me and dodge aside if something is hitting me. My friend is totally the opposite to me, so she came up with an idea of creating a jumping experience. Then we spent like no more than 10 minutes to create a scene where we can be thrown from a high building. Then, a fit of dizziness came over me, I suppose, drugs are nothing more than this.","slug":"Put-on-the-headset","published":1,"updated":"2021-01-20T21:23:57.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7g000t1zjxeuxoam1n","content":"<p>Virtual Reality is a hit today in a variety kinds of industries. Not only animations, games and movies, but also education, even medicine start to make the best of the features of it. VR is not anything I could imagine 5 years ago, however it influences our life much now. As a student majoring in Entertainment Technology, I am lucky enough to have more opportunities to give a touch on VR technology.<br>Recall my first attempt on VR, like 4 years ago. I participated in a competition with some VR enthusiast and made a very simple version of portable VR headset, which, I would rather say, is very similar to the Google cardboard. While because people rarely saw VR in real life at that time, not to mention wearing a headset and feeling it, we turned out to get the 3rd place award. I realized then how VR is able to charm people, (who are tired of the real life, maybe not :)).<br>Through these semesters, having made, playtested and tried out many VR games, I found out that I am a person who would easily get absorbed in the VR world, (perhaps) same with our professor Pollard, which, I don’t think it’s a bad thing at all. Because I can go through different experience without stepping out of the buildings. I would feel losing balance standing on a thin wood in the air, cry out when a dinosaur is reaching me and dodge aside if something is hitting me. My friend is totally the opposite to me, so she came up with an idea of creating a jumping experience. Then we spent like no more than 10 minutes to create a scene where we can be thrown from a high building. Then, a fit of dizziness came over me, I suppose, drugs are nothing more than this.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Virtual Reality is a hit today in a variety kinds of industries. Not only animations, games and movies, but also education, even medicine start to make the best of the features of it. VR is not anything I could imagine 5 years ago, however it influences our life much now. As a student majoring in Entertainment Technology, I am lucky enough to have more opportunities to give a touch on VR technology.<br>Recall my first attempt on VR, like 4 years ago. I participated in a competition with some VR enthusiast and made a very simple version of portable VR headset, which, I would rather say, is very similar to the Google cardboard. While because people rarely saw VR in real life at that time, not to mention wearing a headset and feeling it, we turned out to get the 3rd place award. I realized then how VR is able to charm people, (who are tired of the real life, maybe not :)).<br>Through these semesters, having made, playtested and tried out many VR games, I found out that I am a person who would easily get absorbed in the VR world, (perhaps) same with our professor Pollard, which, I don’t think it’s a bad thing at all. Because I can go through different experience without stepping out of the buildings. I would feel losing balance standing on a thin wood in the air, cry out when a dinosaur is reaching me and dodge aside if something is hitting me. My friend is totally the opposite to me, so she came up with an idea of creating a jumping experience. Then we spent like no more than 10 minutes to create a scene where we can be thrown from a high building. Then, a fit of dizziness came over me, I suppose, drugs are nothing more than this.</p>\n"},{"title":"Python cheat sheet","date":"2017-06-26T06:05:32.000Z","_content":"### Binary, Octal, Hexadecimal, Decimal\n```python\n>>> bin(10)\n'0b1010'\n>>> int('0b1010', 2)\n10\n```\n\n```python\n>>> oct(10)\n'012'\n>>> int('012', 8)\n10\n```\n```python\n>>> hex(10)\n'0xa'\n>>> int('0xa', 16)\n10\n```\n\n","source":"_posts/Python-cheat-sheet.md","raw":"---\ntitle: Python cheat sheet\ndate: 2017-06-25 23:05:32\ntags: [python]\n---\n### Binary, Octal, Hexadecimal, Decimal\n```python\n>>> bin(10)\n'0b1010'\n>>> int('0b1010', 2)\n10\n```\n\n```python\n>>> oct(10)\n'012'\n>>> int('012', 8)\n10\n```\n```python\n>>> hex(10)\n'0xa'\n>>> int('0xa', 16)\n10\n```\n\n","slug":"Python-cheat-sheet","published":1,"updated":"2021-01-20T21:23:57.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7i000v1zjxuuz85cuf","content":"<h3 id=\"Binary-Octal-Hexadecimal-Decimal\"><a href=\"#Binary-Octal-Hexadecimal-Decimal\" class=\"headerlink\" title=\"Binary, Octal, Hexadecimal, Decimal\"></a>Binary, Octal, Hexadecimal, Decimal</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bin(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">'0b1010'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"string\">'0b1010'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>oct(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">'012'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"string\">'012'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">'0xa'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"string\">'0xa'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Binary-Octal-Hexadecimal-Decimal\"><a href=\"#Binary-Octal-Hexadecimal-Decimal\" class=\"headerlink\" title=\"Binary, Octal, Hexadecimal, Decimal\"></a>Binary, Octal, Hexadecimal, Decimal</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>bin(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">'0b1010'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"string\">'0b1010'</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>oct(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">'012'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"string\">'012'</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">'0xa'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int(<span class=\"string\">'0xa'</span>, <span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Replace a list in Python","date":"2016-11-12T11:26:22.000Z","_content":"Replace a list in Python:\n```python\n>>> l = [1,2,3]\n>>> id(l)\n4430796704\n>>> l = [2,3]\n>>> id(l)\n4430918072\n>>> l[:] = [1,2,3]\n>>> id(l)\n4430918072\n```\nThe first way will change the id of the named list, while in the second way, only elements in the list are changed.\n","source":"_posts/Replace-a-list-in-Python.md","raw":"---\ntitle: Replace a list in Python\ndate: 2016-11-12 03:26:22\ntags: [python]\n---\nReplace a list in Python:\n```python\n>>> l = [1,2,3]\n>>> id(l)\n4430796704\n>>> l = [2,3]\n>>> id(l)\n4430918072\n>>> l[:] = [1,2,3]\n>>> id(l)\n4430918072\n```\nThe first way will change the id of the named list, while in the second way, only elements in the list are changed.\n","slug":"Replace-a-list-in-Python","published":1,"updated":"2021-01-20T21:23:57.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7j000x1zjxwsf1om87","content":"<p>Replace a list in Python:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(l)</span><br><span class=\"line\"><span class=\"number\">4430796704</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(l)</span><br><span class=\"line\"><span class=\"number\">4430918072</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l[:] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(l)</span><br><span class=\"line\"><span class=\"number\">4430918072</span></span><br></pre></td></tr></table></figure></p>\n<p>The first way will change the id of the named list, while in the second way, only elements in the list are changed.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Replace a list in Python:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(l)</span><br><span class=\"line\"><span class=\"number\">4430796704</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l = [<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(l)</span><br><span class=\"line\"><span class=\"number\">4430918072</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l[:] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(l)</span><br><span class=\"line\"><span class=\"number\">4430918072</span></span><br></pre></td></tr></table></figure></p>\n<p>The first way will change the id of the named list, while in the second way, only elements in the list are changed.</p>\n"},{"title":"Reverse Linked List in Python","date":"2016-11-13T09:34:34.000Z","_content":"A really fancy way to reverse a linked list in Python:\n```python\ndef reverseList(head):\n\tnew_head = None\n\twhile head:\n\t\thead.next, head, new_head = new_head, head.next, head\n\treturn new_head\n```\n","source":"_posts/Reverse-Linked-List-in-Python.md","raw":"---\ntitle: Reverse Linked List in Python\ndate: 2016-11-13 01:34:34\ntags: [python]\n---\nA really fancy way to reverse a linked list in Python:\n```python\ndef reverseList(head):\n\tnew_head = None\n\twhile head:\n\t\thead.next, head, new_head = new_head, head.next, head\n\treturn new_head\n```\n","slug":"Reverse-Linked-List-in-Python","published":1,"updated":"2021-01-20T21:23:57.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7k00101zjxwulqui9e","content":"<p>A really fancy way to reverse a linked list in Python:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseList</span><span class=\"params\">(head)</span>:</span></span><br><span class=\"line\">\tnew_head = <span class=\"literal\">None</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> head:</span><br><span class=\"line\">\t\thead.next, head, new_head = new_head, head.next, head</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> new_head</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>A really fancy way to reverse a linked list in Python:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverseList</span><span class=\"params\">(head)</span>:</span></span><br><span class=\"line\">\tnew_head = <span class=\"literal\">None</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> head:</span><br><span class=\"line\">\t\thead.next, head, new_head = new_head, head.next, head</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> new_head</span><br></pre></td></tr></table></figure></p>\n"},{"title":"SDF basics 1","date":"2020-07-25T05:07:00.000Z","_content":"\n### Concept\n\nSDF refers to \"Signed Distance Function\".\nThe surface of a geometry `f(p) = 0`, an implicit function, where `p` is a point in the space. Usually ray marching approach can be used to draw such geometry objects.\n\n### Ray marching\nWe start from the camera, trying to find the closest distance. Then from the distance on the ray, march again, and again, until the distance is too long, or it can't reach much further.\n\n```\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n\tfloat t = 0.;\n    for (int i = 0; i < 100; i++) {\n    \tvec3 p = ro + t * rd;\n        float h = getDist(p); // SDF function\n        t += h;\n        if (t > 200. || h < 0.001) break; \n    }\n    if (t > 200.) t = -1.;\n    return t;\n}\n```\n\n### Normals\n[Ref from Inigo Quilez](https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm)\nThe normal of the surface can be down through the gradient of the SDF at points located on the surface.\n![](/images/shaderstudy/2.png)\n![](/images/shaderstudy/3.png)\n\n","source":"_posts/SDF-basics-1.md","raw":"---\ntitle: SDF basics 1\ndate: 2020-07-24 22:07:00\ntags: cg\n---\n\n### Concept\n\nSDF refers to \"Signed Distance Function\".\nThe surface of a geometry `f(p) = 0`, an implicit function, where `p` is a point in the space. Usually ray marching approach can be used to draw such geometry objects.\n\n### Ray marching\nWe start from the camera, trying to find the closest distance. Then from the distance on the ray, march again, and again, until the distance is too long, or it can't reach much further.\n\n```\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n\tfloat t = 0.;\n    for (int i = 0; i < 100; i++) {\n    \tvec3 p = ro + t * rd;\n        float h = getDist(p); // SDF function\n        t += h;\n        if (t > 200. || h < 0.001) break; \n    }\n    if (t > 200.) t = -1.;\n    return t;\n}\n```\n\n### Normals\n[Ref from Inigo Quilez](https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm)\nThe normal of the surface can be down through the gradient of the SDF at points located on the surface.\n![](/images/shaderstudy/2.png)\n![](/images/shaderstudy/3.png)\n\n","slug":"SDF-basics-1","published":1,"updated":"2021-01-20T21:23:57.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7l00121zjxbml1y5gr","content":"<h3 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept\"></a>Concept</h3><p>SDF refers to “Signed Distance Function”.<br>The surface of a geometry <code>f(p) = 0</code>, an implicit function, where <code>p</code> is a point in the space. Usually ray marching approach can be used to draw such geometry objects.</p>\n<h3 id=\"Ray-marching\"><a href=\"#Ray-marching\" class=\"headerlink\" title=\"Ray marching\"></a>Ray marching</h3><p>We start from the camera, trying to find the closest distance. Then from the distance on the ray, march again, and again, until the distance is too long, or it can’t reach much further.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float rayMarch(in vec3 ro, in vec3 rd) &#123;</span><br><span class=\"line\">\tfloat t = 0.;</span><br><span class=\"line\">    for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    \tvec3 p = ro + t * rd;</span><br><span class=\"line\">        float h = getDist(p); // SDF function</span><br><span class=\"line\">        t += h;</span><br><span class=\"line\">        if (t &gt; 200. || h &lt; 0.001) break; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (t &gt; 200.) t = -1.;</span><br><span class=\"line\">    return t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Normals\"><a href=\"#Normals\" class=\"headerlink\" title=\"Normals\"></a>Normals</h3><p><a href=\"https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm\" target=\"_blank\" rel=\"noopener\">Ref from Inigo Quilez</a><br>The normal of the surface can be down through the gradient of the SDF at points located on the surface.<br><img src=\"/images/shaderstudy/2.png\" alt><br><img src=\"/images/shaderstudy/3.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Concept\"><a href=\"#Concept\" class=\"headerlink\" title=\"Concept\"></a>Concept</h3><p>SDF refers to “Signed Distance Function”.<br>The surface of a geometry <code>f(p) = 0</code>, an implicit function, where <code>p</code> is a point in the space. Usually ray marching approach can be used to draw such geometry objects.</p>\n<h3 id=\"Ray-marching\"><a href=\"#Ray-marching\" class=\"headerlink\" title=\"Ray marching\"></a>Ray marching</h3><p>We start from the camera, trying to find the closest distance. Then from the distance on the ray, march again, and again, until the distance is too long, or it can’t reach much further.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float rayMarch(in vec3 ro, in vec3 rd) &#123;</span><br><span class=\"line\">\tfloat t = 0.;</span><br><span class=\"line\">    for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class=\"line\">    \tvec3 p = ro + t * rd;</span><br><span class=\"line\">        float h = getDist(p); // SDF function</span><br><span class=\"line\">        t += h;</span><br><span class=\"line\">        if (t &gt; 200. || h &lt; 0.001) break; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (t &gt; 200.) t = -1.;</span><br><span class=\"line\">    return t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Normals\"><a href=\"#Normals\" class=\"headerlink\" title=\"Normals\"></a>Normals</h3><p><a href=\"https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm\" target=\"_blank\" rel=\"noopener\">Ref from Inigo Quilez</a><br>The normal of the surface can be down through the gradient of the SDF at points located on the surface.<br><img src=\"/images/shaderstudy/2.png\" alt><br><img src=\"/images/shaderstudy/3.png\" alt></p>\n"},{"title":"Shader study 1","date":"2020-07-19T05:40:01.000Z","_content":"\n![sphere](/images/shaderstudy/1.png)\n\nFound two very helpful Youtubers, The Art of Code and Inigo Quilez, who are very generous to provided useful tutorials for shader writing. I really appreciate that.\n\nWatched some of their videos and **Ray Marching** caught my eyes. It is a different way than the traditional ray casting approach to calculate the distance of the objects. I found it very interesting and did some simple practice.\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/WtSyRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/3tjyzc?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\nI'm still in the exploration of this approach new to me. Then I deciced to follow the 5-hour live coding tutorial Happy Jumping. For the first step, a simple sphere with sun light, sky light and shadow, but a lot learned.\n\nNormal calculation: [ref](https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm)\n```glsl\nvec3 getNormal(in vec3 p) {\n    vec2 e = vec2(EPS, 0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                          map(p + e.yxy) - map(p - e.yxy),\n                          map(p + e.yyx) - map(p - e.yyx)));\n}\n```\n\nIn here a trick, when a ray doesn't reach any surface, set it to negative `if (t > 20.0) t = -1.;` \n\n```\nfloat castRay(in vec3 ro, in vec3 rd) {\n    float t = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * t;\n        float d = map(p);\n        if (d < EPS) break;\n        t += d;\n        if (t > MAX_DIST) break;\n    }\n    if (t > 20.0) t = -1.;\n    return t;\n}\n```\n\nIn here when we write the lower sky where it gets a little gray. First, `col` is getting darker when `rd.y` is increasing. `exps` returns the natural exponentiation. `genType mix(genType x, genType y, genType a);` `mix` performs a linear interpolation between x and y using a to weight between them. The return value is computed as `x*(1−a)+y*a`.\n\n```\nvec3 col = vec3(.65, 1., 1.2) - .5 * rd.y;\ncol = mix(col, vec3(.6, .7, .8), exp(-10. * rd.y));\n```\n\nIn here the sun shadow. `step` generates a step function by comparing x to edge. For element `i` of the return value, `0.0` is returned if `x[i] < edge[i]`, and `1.0` is returned otherwise.\n```\nfloat sun_sha = step(castRay(p + EPS * n, sun_dir), 0.); // in shadow ? 0 : 1\n```\n\nGamma correction, or often simply gamma, is a nonlinear operation used to encode and decode luminance or tristimulus values in video or still image systems. In my understanding, Gamma correction usually gets rid of the 'over-shadowed' color and makes the lighting looks more natural. It is necessary for many simulated scene.\n```\ncol = pow(col, vec3(0.4545)); // gamma correction \n```\n\n","source":"_posts/Shader-study-1.md","raw":"---\ntitle: Shader study 1\ndate: 2020-07-18 22:40:01\ntags: cg\n---\n\n![sphere](/images/shaderstudy/1.png)\n\nFound two very helpful Youtubers, The Art of Code and Inigo Quilez, who are very generous to provided useful tutorials for shader writing. I really appreciate that.\n\nWatched some of their videos and **Ray Marching** caught my eyes. It is a different way than the traditional ray casting approach to calculate the distance of the objects. I found it very interesting and did some simple practice.\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/WtSyRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/3tjyzc?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\nI'm still in the exploration of this approach new to me. Then I deciced to follow the 5-hour live coding tutorial Happy Jumping. For the first step, a simple sphere with sun light, sky light and shadow, but a lot learned.\n\nNormal calculation: [ref](https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm)\n```glsl\nvec3 getNormal(in vec3 p) {\n    vec2 e = vec2(EPS, 0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                          map(p + e.yxy) - map(p - e.yxy),\n                          map(p + e.yyx) - map(p - e.yyx)));\n}\n```\n\nIn here a trick, when a ray doesn't reach any surface, set it to negative `if (t > 20.0) t = -1.;` \n\n```\nfloat castRay(in vec3 ro, in vec3 rd) {\n    float t = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * t;\n        float d = map(p);\n        if (d < EPS) break;\n        t += d;\n        if (t > MAX_DIST) break;\n    }\n    if (t > 20.0) t = -1.;\n    return t;\n}\n```\n\nIn here when we write the lower sky where it gets a little gray. First, `col` is getting darker when `rd.y` is increasing. `exps` returns the natural exponentiation. `genType mix(genType x, genType y, genType a);` `mix` performs a linear interpolation between x and y using a to weight between them. The return value is computed as `x*(1−a)+y*a`.\n\n```\nvec3 col = vec3(.65, 1., 1.2) - .5 * rd.y;\ncol = mix(col, vec3(.6, .7, .8), exp(-10. * rd.y));\n```\n\nIn here the sun shadow. `step` generates a step function by comparing x to edge. For element `i` of the return value, `0.0` is returned if `x[i] < edge[i]`, and `1.0` is returned otherwise.\n```\nfloat sun_sha = step(castRay(p + EPS * n, sun_dir), 0.); // in shadow ? 0 : 1\n```\n\nGamma correction, or often simply gamma, is a nonlinear operation used to encode and decode luminance or tristimulus values in video or still image systems. In my understanding, Gamma correction usually gets rid of the 'over-shadowed' color and makes the lighting looks more natural. It is necessary for many simulated scene.\n```\ncol = pow(col, vec3(0.4545)); // gamma correction \n```\n\n","slug":"Shader-study-1","published":1,"updated":"2021-01-20T21:23:57.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7n00151zjxyj1o1dqu","content":"<p><img src=\"/images/shaderstudy/1.png\" alt=\"sphere\"></p>\n<p>Found two very helpful Youtubers, The Art of Code and Inigo Quilez, who are very generous to provided useful tutorials for shader writing. I really appreciate that.</p>\n<p>Watched some of their videos and <strong>Ray Marching</strong> caught my eyes. It is a different way than the traditional ray casting approach to calculate the distance of the objects. I found it very interesting and did some simple practice.</p>\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/WtSyRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/3tjyzc?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<p>I’m still in the exploration of this approach new to me. Then I deciced to follow the 5-hour live coding tutorial Happy Jumping. For the first step, a simple sphere with sun light, sky light and shadow, but a lot learned.</p>\n<p>Normal calculation: <a href=\"https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm\" target=\"_blank\" rel=\"noopener\">ref</a><br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> getNormal(<span class=\"keyword\">in</span> <span class=\"type\">vec3</span> p) &#123;</span><br><span class=\"line\">    <span class=\"type\">vec2</span> e = <span class=\"type\">vec2</span>(EPS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">normalize</span>(<span class=\"type\">vec3</span>(map(p + e.xyy) - map(p - e.xyy),</span><br><span class=\"line\">                          map(p + e.yxy) - map(p - e.yxy),</span><br><span class=\"line\">                          map(p + e.yyx) - map(p - e.yyx)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In here a trick, when a ray doesn’t reach any surface, set it to negative <code>if (t &gt; 20.0) t = -1.;</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float castRay(in vec3 ro, in vec3 rd) &#123;</span><br><span class=\"line\">    float t = 0.;</span><br><span class=\"line\">    for (int i = 0; i &lt; MAX_STEPS; i++) &#123;</span><br><span class=\"line\">    \tvec3 p = ro + rd * t;</span><br><span class=\"line\">        float d = map(p);</span><br><span class=\"line\">        if (d &lt; EPS) break;</span><br><span class=\"line\">        t += d;</span><br><span class=\"line\">        if (t &gt; MAX_DIST) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (t &gt; 20.0) t = -1.;</span><br><span class=\"line\">    return t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In here when we write the lower sky where it gets a little gray. First, <code>col</code> is getting darker when <code>rd.y</code> is increasing. <code>exps</code> returns the natural exponentiation. <code>genType mix(genType x, genType y, genType a);</code> <code>mix</code> performs a linear interpolation between x and y using a to weight between them. The return value is computed as <code>x*(1−a)+y*a</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 col = vec3(.65, 1., 1.2) - .5 * rd.y;</span><br><span class=\"line\">col = mix(col, vec3(.6, .7, .8), exp(-10. * rd.y));</span><br></pre></td></tr></table></figure>\n<p>In here the sun shadow. <code>step</code> generates a step function by comparing x to edge. For element <code>i</code> of the return value, <code>0.0</code> is returned if <code>x[i] &lt; edge[i]</code>, and <code>1.0</code> is returned otherwise.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float sun_sha = step(castRay(p + EPS * n, sun_dir), 0.); // in shadow ? 0 : 1</span><br></pre></td></tr></table></figure></p>\n<p>Gamma correction, or often simply gamma, is a nonlinear operation used to encode and decode luminance or tristimulus values in video or still image systems. In my understanding, Gamma correction usually gets rid of the ‘over-shadowed’ color and makes the lighting looks more natural. It is necessary for many simulated scene.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">col = pow(col, vec3(0.4545)); // gamma correction</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/shaderstudy/1.png\" alt=\"sphere\"></p>\n<p>Found two very helpful Youtubers, The Art of Code and Inigo Quilez, who are very generous to provided useful tutorials for shader writing. I really appreciate that.</p>\n<p>Watched some of their videos and <strong>Ray Marching</strong> caught my eyes. It is a different way than the traditional ray casting approach to calculate the distance of the objects. I found it very interesting and did some simple practice.</p>\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/WtSyRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/3tjyzc?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<p>I’m still in the exploration of this approach new to me. Then I deciced to follow the 5-hour live coding tutorial Happy Jumping. For the first step, a simple sphere with sun light, sky light and shadow, but a lot learned.</p>\n<p>Normal calculation: <a href=\"https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm\" target=\"_blank\" rel=\"noopener\">ref</a><br><figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">vec3</span> getNormal(<span class=\"keyword\">in</span> <span class=\"type\">vec3</span> p) &#123;</span><br><span class=\"line\">    <span class=\"type\">vec2</span> e = <span class=\"type\">vec2</span>(EPS, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">normalize</span>(<span class=\"type\">vec3</span>(map(p + e.xyy) - map(p - e.xyy),</span><br><span class=\"line\">                          map(p + e.yxy) - map(p - e.yxy),</span><br><span class=\"line\">                          map(p + e.yyx) - map(p - e.yyx)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>In here a trick, when a ray doesn’t reach any surface, set it to negative <code>if (t &gt; 20.0) t = -1.;</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float castRay(in vec3 ro, in vec3 rd) &#123;</span><br><span class=\"line\">    float t = 0.;</span><br><span class=\"line\">    for (int i = 0; i &lt; MAX_STEPS; i++) &#123;</span><br><span class=\"line\">    \tvec3 p = ro + rd * t;</span><br><span class=\"line\">        float d = map(p);</span><br><span class=\"line\">        if (d &lt; EPS) break;</span><br><span class=\"line\">        t += d;</span><br><span class=\"line\">        if (t &gt; MAX_DIST) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (t &gt; 20.0) t = -1.;</span><br><span class=\"line\">    return t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In here when we write the lower sky where it gets a little gray. First, <code>col</code> is getting darker when <code>rd.y</code> is increasing. <code>exps</code> returns the natural exponentiation. <code>genType mix(genType x, genType y, genType a);</code> <code>mix</code> performs a linear interpolation between x and y using a to weight between them. The return value is computed as <code>x*(1−a)+y*a</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec3 col = vec3(.65, 1., 1.2) - .5 * rd.y;</span><br><span class=\"line\">col = mix(col, vec3(.6, .7, .8), exp(-10. * rd.y));</span><br></pre></td></tr></table></figure>\n<p>In here the sun shadow. <code>step</code> generates a step function by comparing x to edge. For element <code>i</code> of the return value, <code>0.0</code> is returned if <code>x[i] &lt; edge[i]</code>, and <code>1.0</code> is returned otherwise.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float sun_sha = step(castRay(p + EPS * n, sun_dir), 0.); // in shadow ? 0 : 1</span><br></pre></td></tr></table></figure></p>\n<p>Gamma correction, or often simply gamma, is a nonlinear operation used to encode and decode luminance or tristimulus values in video or still image systems. In my understanding, Gamma correction usually gets rid of the ‘over-shadowed’ color and makes the lighting looks more natural. It is necessary for many simulated scene.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">col = pow(col, vec3(0.4545)); // gamma correction</span><br></pre></td></tr></table></figure></p>\n"},{"title":"SDF basics 2","date":"2020-07-25T22:58:27.000Z","_content":"![](/images/shaderstudy/4.png)\n![](/images/shaderstudy/5.png)\n","source":"_posts/SDF-basics-2.md","raw":"---\ntitle: SDF basics 2\ndate: 2020-07-25 15:58:27\ntags: cg\n---\n![](/images/shaderstudy/4.png)\n![](/images/shaderstudy/5.png)\n","slug":"SDF-basics-2","published":1,"updated":"2021-01-20T21:23:57.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7p00171zjxhula6mtg","content":"<p><img src=\"/images/shaderstudy/4.png\" alt><br><img src=\"/images/shaderstudy/5.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/shaderstudy/4.png\" alt><br><img src=\"/images/shaderstudy/5.png\" alt></p>\n"},{"title":"Setup glfw and glew","date":"2017-02-16T07:02:17.000Z","_content":"I used OpenGL more than once before. However, every time I have to start a new OpenGL project, it would be like the first time. Because I will encounter so many new problems or old which I don't remember. Today I used XCode to build a very simple program, but there turned out to be some fresh errors. \n```\nUndefined symbols for architecture x86_64:\n  \"_glewExperimental\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glewInit\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwCreateWindow\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwInit\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwMakeContextCurrent\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwTerminate\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwWindowHint\", referenced from:\n      _main in main-8eb2b0.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\nActually they are not special at all. It's just because those libraries were not completely installed or linked(I guess). But the challenge today is my Homebrew and Macport also broke down like they intend(probrably because I haven't used them for a long time). Then to solve the problem. I used the very universal solution: reinstall everything - homebrew, macport, glew, glfw3. Then it worked. But it took me incredibly hours.\n```bash\ngcc -o main main.cpp -framework OpenGL -framework GLUT -lGLEW -lglfw3\n```\n","source":"_posts/Setup-glfw-and-glew.md","raw":"---\ntitle: Setup glfw and glew\ndate: 2017-02-15 23:02:17\ntags: [notes]\n---\nI used OpenGL more than once before. However, every time I have to start a new OpenGL project, it would be like the first time. Because I will encounter so many new problems or old which I don't remember. Today I used XCode to build a very simple program, but there turned out to be some fresh errors. \n```\nUndefined symbols for architecture x86_64:\n  \"_glewExperimental\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glewInit\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwCreateWindow\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwInit\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwMakeContextCurrent\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwTerminate\", referenced from:\n      _main in main-8eb2b0.o\n  \"_glfwWindowHint\", referenced from:\n      _main in main-8eb2b0.o\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\nActually they are not special at all. It's just because those libraries were not completely installed or linked(I guess). But the challenge today is my Homebrew and Macport also broke down like they intend(probrably because I haven't used them for a long time). Then to solve the problem. I used the very universal solution: reinstall everything - homebrew, macport, glew, glfw3. Then it worked. But it took me incredibly hours.\n```bash\ngcc -o main main.cpp -framework OpenGL -framework GLUT -lGLEW -lglfw3\n```\n","slug":"Setup-glfw-and-glew","published":1,"updated":"2021-01-20T21:23:57.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7q001a1zjxq6ewndq4","content":"<p>I used OpenGL more than once before. However, every time I have to start a new OpenGL project, it would be like the first time. Because I will encounter so many new problems or old which I don’t remember. Today I used XCode to build a very simple program, but there turned out to be some fresh errors.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols for architecture x86_64:</span><br><span class=\"line\">  &quot;_glewExperimental&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glewInit&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwCreateWindow&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwInit&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwMakeContextCurrent&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwTerminate&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwWindowHint&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">ld: symbol(s) not found for architecture x86_64</span><br><span class=\"line\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure></p>\n<p>Actually they are not special at all. It’s just because those libraries were not completely installed or linked(I guess). But the challenge today is my Homebrew and Macport also broke down like they intend(probrably because I haven’t used them for a long time). Then to solve the problem. I used the very universal solution: reinstall everything - homebrew, macport, glew, glfw3. Then it worked. But it took me incredibly hours.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o main main.cpp -framework OpenGL -framework GLUT -lGLEW -lglfw3</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>I used OpenGL more than once before. However, every time I have to start a new OpenGL project, it would be like the first time. Because I will encounter so many new problems or old which I don’t remember. Today I used XCode to build a very simple program, but there turned out to be some fresh errors.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Undefined symbols for architecture x86_64:</span><br><span class=\"line\">  &quot;_glewExperimental&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glewInit&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwCreateWindow&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwInit&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwMakeContextCurrent&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwTerminate&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">  &quot;_glfwWindowHint&quot;, referenced from:</span><br><span class=\"line\">      _main in main-8eb2b0.o</span><br><span class=\"line\">ld: symbol(s) not found for architecture x86_64</span><br><span class=\"line\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br></pre></td></tr></table></figure></p>\n<p>Actually they are not special at all. It’s just because those libraries were not completely installed or linked(I guess). But the challenge today is my Homebrew and Macport also broke down like they intend(probrably because I haven’t used them for a long time). Then to solve the problem. I used the very universal solution: reinstall everything - homebrew, macport, glew, glfw3. Then it worked. But it took me incredibly hours.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o main main.cpp -framework OpenGL -framework GLUT -lGLEW -lglfw3</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Speaking of rendering","date":"2017-04-28T09:09:47.000Z","_content":"Speaking of rendering, I will have to mention this genius - \"Octane\". As officially introduced, Octane is the world’s first and fastest GPU-accelerated, unbiased, physically correct renderer. It is said that Octane is insanely fast, especially crazy fast SSS, DOF and Motion Blur. What I was amazed is that works made by Octane are always \"unrealisticly\" realistic(perhaps also because of the artist's style). It simulates the weather and sky environment throughout 365 days of a year. But, finally, the price is also beautiful, so unfortunately I don't have the chance to own one except for the very limited trial version. So, now, it's in my wishlist. I will purchase one once I get a job... (...)\n\nSamples rendered by Octane (Artist: [Beeple](http://www.beeple-crap.com)).\n![](/images/octane/04-23-17.jpg)\n![](/images/octane/04-21-17.jpg)\n![](/images/octane/04-20-17.jpg)\n![](/images/octane/04-16-17.jpg)","source":"_posts/Speaking-of-rendering.md","raw":"---\ntitle: Speaking of rendering\ndate: 2017-04-28 02:09:47\ntags: [15664]\n---\nSpeaking of rendering, I will have to mention this genius - \"Octane\". As officially introduced, Octane is the world’s first and fastest GPU-accelerated, unbiased, physically correct renderer. It is said that Octane is insanely fast, especially crazy fast SSS, DOF and Motion Blur. What I was amazed is that works made by Octane are always \"unrealisticly\" realistic(perhaps also because of the artist's style). It simulates the weather and sky environment throughout 365 days of a year. But, finally, the price is also beautiful, so unfortunately I don't have the chance to own one except for the very limited trial version. So, now, it's in my wishlist. I will purchase one once I get a job... (...)\n\nSamples rendered by Octane (Artist: [Beeple](http://www.beeple-crap.com)).\n![](/images/octane/04-23-17.jpg)\n![](/images/octane/04-21-17.jpg)\n![](/images/octane/04-20-17.jpg)\n![](/images/octane/04-16-17.jpg)","slug":"Speaking-of-rendering","published":1,"updated":"2021-01-20T21:23:57.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7r001c1zjxql96pq4c","content":"<p>Speaking of rendering, I will have to mention this genius - “Octane”. As officially introduced, Octane is the world’s first and fastest GPU-accelerated, unbiased, physically correct renderer. It is said that Octane is insanely fast, especially crazy fast SSS, DOF and Motion Blur. What I was amazed is that works made by Octane are always “unrealisticly” realistic(perhaps also because of the artist’s style). It simulates the weather and sky environment throughout 365 days of a year. But, finally, the price is also beautiful, so unfortunately I don’t have the chance to own one except for the very limited trial version. So, now, it’s in my wishlist. I will purchase one once I get a job… (…)</p>\n<p>Samples rendered by Octane (Artist: <a href=\"http://www.beeple-crap.com\" target=\"_blank\" rel=\"noopener\">Beeple</a>).<br><img src=\"/images/octane/04-23-17.jpg\" alt><br><img src=\"/images/octane/04-21-17.jpg\" alt><br><img src=\"/images/octane/04-20-17.jpg\" alt><br><img src=\"/images/octane/04-16-17.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Speaking of rendering, I will have to mention this genius - “Octane”. As officially introduced, Octane is the world’s first and fastest GPU-accelerated, unbiased, physically correct renderer. It is said that Octane is insanely fast, especially crazy fast SSS, DOF and Motion Blur. What I was amazed is that works made by Octane are always “unrealisticly” realistic(perhaps also because of the artist’s style). It simulates the weather and sky environment throughout 365 days of a year. But, finally, the price is also beautiful, so unfortunately I don’t have the chance to own one except for the very limited trial version. So, now, it’s in my wishlist. I will purchase one once I get a job… (…)</p>\n<p>Samples rendered by Octane (Artist: <a href=\"http://www.beeple-crap.com\" target=\"_blank\" rel=\"noopener\">Beeple</a>).<br><img src=\"/images/octane/04-23-17.jpg\" alt><br><img src=\"/images/octane/04-21-17.jpg\" alt><br><img src=\"/images/octane/04-20-17.jpg\" alt><br><img src=\"/images/octane/04-16-17.jpg\" alt></p>\n"},{"title":"Starting a mini ray tracer with ShaderToy","date":"2020-06-30T05:55:42.000Z","_content":"\nToday I started a new project called Toycer. Because it is expected to be a ray tracer built with ShaderToy. After I tried to implement [a ray tracer with WebGL](https://github.com/akanarika/Tracer), I have got some basic ideas about how to start from scratch.\n\nFor the first part I set up a scene, where the camera sits at ```(0., 0., 2.)``` and a sphere is at ```(0., 0., -4.)```. So the camera looks into ```-z``` direction. Currently there is no shading for it. The color here depends on the ```t``` value of the hit point. And it looks like this:\n![demo](/images/toycer/1.png)\n\nSome helpful videos I referred to on Youtube:\n* [Shadertoy for absolute beginners](https://www.youtube.com/watch?v=u5HAYVHsasc)\n* [ShaderToy Tutorial Part 2 - Building stuff with circles](https://www.youtube.com/watch?v=GgGBR4z8C9o)\n* [ShaderToy Tutorial - The simplest 3D](https://www.youtube.com/watch?v=dKA5ZVALOhs)\n\n","source":"_posts/Starting-a-mini-ray-tracer-with-ShaderToy.md","raw":"---\ntitle: Starting a mini ray tracer with ShaderToy\ndate: 2020-06-29 22:55:42\ntags: [cg]\n---\n\nToday I started a new project called Toycer. Because it is expected to be a ray tracer built with ShaderToy. After I tried to implement [a ray tracer with WebGL](https://github.com/akanarika/Tracer), I have got some basic ideas about how to start from scratch.\n\nFor the first part I set up a scene, where the camera sits at ```(0., 0., 2.)``` and a sphere is at ```(0., 0., -4.)```. So the camera looks into ```-z``` direction. Currently there is no shading for it. The color here depends on the ```t``` value of the hit point. And it looks like this:\n![demo](/images/toycer/1.png)\n\nSome helpful videos I referred to on Youtube:\n* [Shadertoy for absolute beginners](https://www.youtube.com/watch?v=u5HAYVHsasc)\n* [ShaderToy Tutorial Part 2 - Building stuff with circles](https://www.youtube.com/watch?v=GgGBR4z8C9o)\n* [ShaderToy Tutorial - The simplest 3D](https://www.youtube.com/watch?v=dKA5ZVALOhs)\n\n","slug":"Starting-a-mini-ray-tracer-with-ShaderToy","published":1,"updated":"2021-01-20T21:23:57.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7s001f1zjxww2aacao","content":"<p>Today I started a new project called Toycer. Because it is expected to be a ray tracer built with ShaderToy. After I tried to implement <a href=\"https://github.com/akanarika/Tracer\" target=\"_blank\" rel=\"noopener\">a ray tracer with WebGL</a>, I have got some basic ideas about how to start from scratch.</p>\n<p>For the first part I set up a scene, where the camera sits at <code>(0., 0., 2.)</code> and a sphere is at <code>(0., 0., -4.)</code>. So the camera looks into <code>-z</code> direction. Currently there is no shading for it. The color here depends on the <code>t</code> value of the hit point. And it looks like this:<br><img src=\"/images/toycer/1.png\" alt=\"demo\"></p>\n<p>Some helpful videos I referred to on Youtube:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=u5HAYVHsasc\" target=\"_blank\" rel=\"noopener\">Shadertoy for absolute beginners</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=GgGBR4z8C9o\" target=\"_blank\" rel=\"noopener\">ShaderToy Tutorial Part 2 - Building stuff with circles</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=dKA5ZVALOhs\" target=\"_blank\" rel=\"noopener\">ShaderToy Tutorial - The simplest 3D</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Today I started a new project called Toycer. Because it is expected to be a ray tracer built with ShaderToy. After I tried to implement <a href=\"https://github.com/akanarika/Tracer\" target=\"_blank\" rel=\"noopener\">a ray tracer with WebGL</a>, I have got some basic ideas about how to start from scratch.</p>\n<p>For the first part I set up a scene, where the camera sits at <code>(0., 0., 2.)</code> and a sphere is at <code>(0., 0., -4.)</code>. So the camera looks into <code>-z</code> direction. Currently there is no shading for it. The color here depends on the <code>t</code> value of the hit point. And it looks like this:<br><img src=\"/images/toycer/1.png\" alt=\"demo\"></p>\n<p>Some helpful videos I referred to on Youtube:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=u5HAYVHsasc\" target=\"_blank\" rel=\"noopener\">Shadertoy for absolute beginners</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=GgGBR4z8C9o\" target=\"_blank\" rel=\"noopener\">ShaderToy Tutorial Part 2 - Building stuff with circles</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=dKA5ZVALOhs\" target=\"_blank\" rel=\"noopener\">ShaderToy Tutorial - The simplest 3D</a></li>\n</ul>\n"},{"title":"Thinking about IK","date":"2017-02-08T18:23:29.000Z","_content":"Prof.Pollard introduced several different kinds of Inverse Kinematics solutions to us in these two courses. In my understanding, there is no best IK solver, but more suitable ones. Some are fast; some are smoother; some are just more stylish for specific motions. Here is an interesting implementation video I found on YouTube.\n{% youtube XdMDuWD8jlk %}\n","source":"_posts/Thinking-about-IK.md","raw":"---\ntitle: Thinking about IK\ndate: 2017-02-08 10:23:29\ntags: [15664]\n---\nProf.Pollard introduced several different kinds of Inverse Kinematics solutions to us in these two courses. In my understanding, there is no best IK solver, but more suitable ones. Some are fast; some are smoother; some are just more stylish for specific motions. Here is an interesting implementation video I found on YouTube.\n{% youtube XdMDuWD8jlk %}\n","slug":"Thinking-about-IK","published":1,"updated":"2021-01-20T21:23:57.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7t001h1zjxtbpprr5b","content":"<p>Prof.Pollard introduced several different kinds of Inverse Kinematics solutions to us in these two courses. In my understanding, there is no best IK solver, but more suitable ones. Some are fast; some are smoother; some are just more stylish for specific motions. Here is an interesting implementation video I found on YouTube.<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/XdMDuWD8jlk\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Prof.Pollard introduced several different kinds of Inverse Kinematics solutions to us in these two courses. In my understanding, there is no best IK solver, but more suitable ones. Some are fast; some are smoother; some are just more stylish for specific motions. Here is an interesting implementation video I found on YouTube.<br><div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/XdMDuWD8jlk\" frameborder=\"0\" allowfullscreen></iframe></div></p>\n"},{"title":"Zip in Python","date":"2017-06-15T00:48:12.000Z","_content":"\nSay I have a list:\n\n```python\na = ['.87654321', '2........', '3........', '4........', '5........', '6........', '7........', '8........', '9........']\n```\n\nHow can I \"transpose\" it?\n\n```python\nb = zip(*a)\n```\n\nthen \n\n```python\n>>> b\n[('.', '2', '3', '4', '5', '6', '7', '8', '9'), ('8', '.', '.', '.', '.', '.', '.', '.', '.'), ('7', '.', '.', '.', '.', '.', '.', '.', '.'), ('6', '.', '.', '.', '.', '.', '.', '.', '.'), ('5', '.', '.', '.', '.', '.', '.', '.', '.'), ('4', '.', '.', '.', '.', ' ', '.', '.', '.'), ('3', '.', '.', '.', '.', ' ', '.', '.', '.'), ('2', '.', '.', '.', '.', ' ', '.', '.', '.'), ('1', '.', '.', '.', '.', ' ', '.', '.', '.')]\n```\n\n","source":"_posts/Zip-in-Python.md","raw":"---\ntitle: Zip in Python\ndate: 2017-06-14 17:48:12\ntags: [python]\n---\n\nSay I have a list:\n\n```python\na = ['.87654321', '2........', '3........', '4........', '5........', '6........', '7........', '8........', '9........']\n```\n\nHow can I \"transpose\" it?\n\n```python\nb = zip(*a)\n```\n\nthen \n\n```python\n>>> b\n[('.', '2', '3', '4', '5', '6', '7', '8', '9'), ('8', '.', '.', '.', '.', '.', '.', '.', '.'), ('7', '.', '.', '.', '.', '.', '.', '.', '.'), ('6', '.', '.', '.', '.', '.', '.', '.', '.'), ('5', '.', '.', '.', '.', '.', '.', '.', '.'), ('4', '.', '.', '.', '.', ' ', '.', '.', '.'), ('3', '.', '.', '.', '.', ' ', '.', '.', '.'), ('2', '.', '.', '.', '.', ' ', '.', '.', '.'), ('1', '.', '.', '.', '.', ' ', '.', '.', '.')]\n```\n\n","slug":"Zip-in-Python","published":1,"updated":"2021-01-20T21:23:57.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7u001j1zjxgamdhl1f","content":"<p>Say I have a list:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'.87654321'</span>, <span class=\"string\">'2........'</span>, <span class=\"string\">'3........'</span>, <span class=\"string\">'4........'</span>, <span class=\"string\">'5........'</span>, <span class=\"string\">'6........'</span>, <span class=\"string\">'7........'</span>, <span class=\"string\">'8........'</span>, <span class=\"string\">'9........'</span>]</span><br></pre></td></tr></table></figure>\n<p>How can I “transpose” it?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = zip(*a)</span><br></pre></td></tr></table></figure>\n<p>then </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[(<span class=\"string\">'.'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>), (<span class=\"string\">'8'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'7'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'6'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'5'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'4'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'3'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'2'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'1'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>)]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Say I have a list:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'.87654321'</span>, <span class=\"string\">'2........'</span>, <span class=\"string\">'3........'</span>, <span class=\"string\">'4........'</span>, <span class=\"string\">'5........'</span>, <span class=\"string\">'6........'</span>, <span class=\"string\">'7........'</span>, <span class=\"string\">'8........'</span>, <span class=\"string\">'9........'</span>]</span><br></pre></td></tr></table></figure>\n<p>How can I “transpose” it?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = zip(*a)</span><br></pre></td></tr></table></figure>\n<p>then </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[(<span class=\"string\">'.'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'6'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>), (<span class=\"string\">'8'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'7'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'6'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'5'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'4'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'3'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'2'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>), (<span class=\"string\">'1'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'.'</span>)]</span><br></pre></td></tr></table></figure>\n"},{"title":"const T& xx","date":"2017-05-29T08:24:55.000Z","_content":"Start on a new page. Following [Scratchapixel](https://www.scratchapixel.com) to review and learn graphics. In the first lesson, a constructor\n\n```c++\nVec3(const T &xx) : x(xx), y(xx), z(xx) {} \n```\nin class Vec3 is used. As a weak learner of c++, I'm confused about the parameter passing here. Why using const T &xx?\nAn answer on the stack overflow solved my question.\n\n[post](https://stackoverflow.com/questions/2627166/difference-between-const-reference-and-normal-parameter)\nWhat's the difference?\n\n```c++\nvoid DoWork(int n);\nvoid DoWork(const int &n);\n```\n\nAnswer:\nThe difference is more prominent when you are passing a big struct/class.\n\n```c++\nstruct MyData {\n    int a,b,c,d,e,f,g,h;\n    long array[1234];\n};\nvoid DoWork(MyData md);\nvoid DoWork(const MyData& md);\n```\nWhen you use use 'normal' parameter, you pass the parameter by value and hence creating a copy of the parameter you pass. if you are using const reference, you pass it by reference and the original data is not copied.\nIn both cases, the original data cannot be modified from inside the function.\nEDIT:\nIn certain cases, the original data might be able to get modified as pointed out by Charles Bailey in his answer.\n","source":"_posts/const-T-and-xx.md","raw":"---\ntitle: const T& xx\ndate: 2017-05-29 01:24:55\ntags: [cpp]\n---\nStart on a new page. Following [Scratchapixel](https://www.scratchapixel.com) to review and learn graphics. In the first lesson, a constructor\n\n```c++\nVec3(const T &xx) : x(xx), y(xx), z(xx) {} \n```\nin class Vec3 is used. As a weak learner of c++, I'm confused about the parameter passing here. Why using const T &xx?\nAn answer on the stack overflow solved my question.\n\n[post](https://stackoverflow.com/questions/2627166/difference-between-const-reference-and-normal-parameter)\nWhat's the difference?\n\n```c++\nvoid DoWork(int n);\nvoid DoWork(const int &n);\n```\n\nAnswer:\nThe difference is more prominent when you are passing a big struct/class.\n\n```c++\nstruct MyData {\n    int a,b,c,d,e,f,g,h;\n    long array[1234];\n};\nvoid DoWork(MyData md);\nvoid DoWork(const MyData& md);\n```\nWhen you use use 'normal' parameter, you pass the parameter by value and hence creating a copy of the parameter you pass. if you are using const reference, you pass it by reference and the original data is not copied.\nIn both cases, the original data cannot be modified from inside the function.\nEDIT:\nIn certain cases, the original data might be able to get modified as pointed out by Charles Bailey in his answer.\n","slug":"const-T-and-xx","published":1,"updated":"2021-01-20T21:23:57.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk5zgt7v001m1zjxase761vx","content":"<p>Start on a new page. Following <a href=\"https://www.scratchapixel.com\" target=\"_blank\" rel=\"noopener\">Scratchapixel</a> to review and learn graphics. In the first lesson, a constructor</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vec3(<span class=\"keyword\">const</span> T &amp;xx) : x(xx), y(xx), z(xx) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>in class Vec3 is used. As a weak learner of c++, I’m confused about the parameter passing here. Why using const T &amp;xx?<br>An answer on the stack overflow solved my question.</p>\n<p><a href=\"https://stackoverflow.com/questions/2627166/difference-between-const-reference-and-normal-parameter\" target=\"_blank\" rel=\"noopener\">post</a><br>What’s the difference?</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;n)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>Answer:<br>The difference is more prominent when you are passing a big struct/class.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyData</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c,d,e,f,g,h;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"built_in\">array</span>[<span class=\"number\">1234</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(MyData md)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(<span class=\"keyword\">const</span> MyData&amp; md)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>When you use use ‘normal’ parameter, you pass the parameter by value and hence creating a copy of the parameter you pass. if you are using const reference, you pass it by reference and the original data is not copied.<br>In both cases, the original data cannot be modified from inside the function.<br>EDIT:<br>In certain cases, the original data might be able to get modified as pointed out by Charles Bailey in his answer.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Start on a new page. Following <a href=\"https://www.scratchapixel.com\" target=\"_blank\" rel=\"noopener\">Scratchapixel</a> to review and learn graphics. In the first lesson, a constructor</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vec3(<span class=\"keyword\">const</span> T &amp;xx) : x(xx), y(xx), z(xx) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>in class Vec3 is used. As a weak learner of c++, I’m confused about the parameter passing here. Why using const T &amp;xx?<br>An answer on the stack overflow solved my question.</p>\n<p><a href=\"https://stackoverflow.com/questions/2627166/difference-between-const-reference-and-normal-parameter\" target=\"_blank\" rel=\"noopener\">post</a><br>What’s the difference?</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;n)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>Answer:<br>The difference is more prominent when you are passing a big struct/class.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyData</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c,d,e,f,g,h;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"built_in\">array</span>[<span class=\"number\">1234</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(MyData md)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DoWork</span><span class=\"params\">(<span class=\"keyword\">const</span> MyData&amp; md)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>When you use use ‘normal’ parameter, you pass the parameter by value and hence creating a copy of the parameter you pass. if you are using const reference, you pass it by reference and the original data is not copied.<br>In both cases, the original data cannot be modified from inside the function.<br>EDIT:<br>In certain cases, the original data might be able to get modified as pointed out by Charles Bailey in his answer.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckk5zgt6s00001zjxzjef8w29","tag_id":"ckk5zgt6y00041zjxwnqiztpm","_id":"ckk5zgt7300091zjx1f6w1gv3"},{"post_id":"ckk5zgt73000a1zjxo30mylz4","tag_id":"ckk5zgt6y00041zjxwnqiztpm","_id":"ckk5zgt77000d1zjx20w2kafr"},{"post_id":"ckk5zgt6w00021zjx40fu3z8u","tag_id":"ckk5zgt7200081zjxuqtgrsuy","_id":"ckk5zgt78000f1zjxt7p5hsqo"},{"post_id":"ckk5zgt74000b1zjxej2ngalx","tag_id":"ckk5zgt6y00041zjxwnqiztpm","_id":"ckk5zgt7a000i1zjx82fj3phr"},{"post_id":"ckk5zgt6z00051zjxwqczilxj","tag_id":"ckk5zgt7200081zjxuqtgrsuy","_id":"ckk5zgt7b000k1zjxb027l3gc"},{"post_id":"ckk5zgt7100061zjxqld7aqz1","tag_id":"ckk5zgt7200081zjxuqtgrsuy","_id":"ckk5zgt7e000o1zjxpzuojahi"},{"post_id":"ckk5zgt7200071zjxm0so739c","tag_id":"ckk5zgt7200081zjxuqtgrsuy","_id":"ckk5zgt7g000s1zjx15ygsrvn"},{"post_id":"ckk5zgt77000e1zjx01bqj9zf","tag_id":"ckk5zgt7f000q1zjx9yyfw7iu","_id":"ckk5zgt7j000w1zjx5972058x"},{"post_id":"ckk5zgt7g000t1zjxeuxoam1n","tag_id":"ckk5zgt7f000q1zjx9yyfw7iu","_id":"ckk5zgt7k000y1zjxg11q8dsn"},{"post_id":"ckk5zgt7i000v1zjxuuz85cuf","tag_id":"ckk5zgt6y00041zjxwnqiztpm","_id":"ckk5zgt7l00111zjxnivx61r4"},{"post_id":"ckk5zgt79000g1zjxbx0g0oid","tag_id":"ckk5zgt7f000q1zjx9yyfw7iu","_id":"ckk5zgt7m00131zjxiairsk91"},{"post_id":"ckk5zgt7j000x1zjxwsf1om87","tag_id":"ckk5zgt6y00041zjxwnqiztpm","_id":"ckk5zgt7p00161zjxh576421d"},{"post_id":"ckk5zgt7k00101zjxwulqui9e","tag_id":"ckk5zgt6y00041zjxwnqiztpm","_id":"ckk5zgt7q00181zjxgekgeotw"},{"post_id":"ckk5zgt7a000j1zjxpx6fdra8","tag_id":"ckk5zgt7k000z1zjxdegje0cu","_id":"ckk5zgt7r001b1zjxdyoxwrp6"},{"post_id":"ckk5zgt7c000l1zjx4t5nehyz","tag_id":"ckk5zgt7f000q1zjx9yyfw7iu","_id":"ckk5zgt7s001d1zjxsu7gdb4z"},{"post_id":"ckk5zgt7d000n1zjx0jniq5uf","tag_id":"ckk5zgt7f000q1zjx9yyfw7iu","_id":"ckk5zgt7t001g1zjxc42p4adi"},{"post_id":"ckk5zgt7r001c1zjxql96pq4c","tag_id":"ckk5zgt7f000q1zjx9yyfw7iu","_id":"ckk5zgt7u001i1zjxseb40rh4"},{"post_id":"ckk5zgt7t001h1zjxtbpprr5b","tag_id":"ckk5zgt7f000q1zjx9yyfw7iu","_id":"ckk5zgt7v001l1zjx2gjgblvy"},{"post_id":"ckk5zgt7e000p1zjxfawr5gc0","tag_id":"ckk5zgt7s001e1zjxm0t6hbzb","_id":"ckk5zgt7w001n1zjx4drf1b03"},{"post_id":"ckk5zgt7u001j1zjxgamdhl1f","tag_id":"ckk5zgt6y00041zjxwnqiztpm","_id":"ckk5zgt7x001p1zjxtae1f87p"},{"post_id":"ckk5zgt7v001m1zjxase761vx","tag_id":"ckk5zgt7200081zjxuqtgrsuy","_id":"ckk5zgt7x001q1zjxm9egrvcy"},{"post_id":"ckk5zgt7f000r1zjxfhg4m0b5","tag_id":"ckk5zgt7s001e1zjxm0t6hbzb","_id":"ckk5zgt7x001s1zjxp8v1mcsv"},{"post_id":"ckk5zgt7l00121zjxbml1y5gr","tag_id":"ckk5zgt7s001e1zjxm0t6hbzb","_id":"ckk5zgt7x001t1zjxiftab7p1"},{"post_id":"ckk5zgt7n00151zjxyj1o1dqu","tag_id":"ckk5zgt7s001e1zjxm0t6hbzb","_id":"ckk5zgt7y001v1zjxietc5gzq"},{"post_id":"ckk5zgt7p00171zjxhula6mtg","tag_id":"ckk5zgt7s001e1zjxm0t6hbzb","_id":"ckk5zgt7y001x1zjx4wfccbc0"},{"post_id":"ckk5zgt7q001a1zjxq6ewndq4","tag_id":"ckk5zgt7y001w1zjxry0xiiyo","_id":"ckk5zgt7z001z1zjxca21gze0"},{"post_id":"ckk5zgt7s001f1zjxww2aacao","tag_id":"ckk5zgt7s001e1zjxm0t6hbzb","_id":"ckk5zgt8000201zjxfn3728zl"}],"Tag":[{"name":"python","_id":"ckk5zgt6y00041zjxwnqiztpm"},{"name":"cpp","_id":"ckk5zgt7200081zjxuqtgrsuy"},{"name":"15664","_id":"ckk5zgt7f000q1zjx9yyfw7iu"},{"name":"Japanese","_id":"ckk5zgt7k000z1zjxdegje0cu"},{"name":"cg","_id":"ckk5zgt7s001e1zjxm0t6hbzb"},{"name":"notes","_id":"ckk5zgt7y001w1zjxry0xiiyo"}]}}